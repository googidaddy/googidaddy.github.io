"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5460],{9460:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6327fb36",path:"/blogs/C++/Binary%20Search%20Tree(BST).html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Binary Search Tree(BST)",slug:"binary-search-tree-bst",children:[]},{level:2,title:"Definition of the Binary Search Tree",slug:"definition-of-the-binary-search-tree",children:[]},{level:2,title:"Validate Binary Search Tree",slug:"validate-binary-search-tree",children:[{level:3,title:"Solution-inorder traversal",slug:"solution-inorder-traversal",children:[]}]},{level:2,title:"Binary Search Tree Iterator",slug:"binary-search-tree-iterator",children:[{level:3,title:"Solution",slug:"solution",children:[]}]},{level:2,title:"Basic Operations in BST",slug:"basic-operations-in-bst",children:[]},{level:2,title:"Search in a Binary Search Tree",slug:"search-in-a-binary-search-tree",children:[{level:3,title:"Solution",slug:"solution-1",children:[]}]},{level:2,title:"Insertion in a Binary Search Tree",slug:"insertion-in-a-binary-search-tree",children:[{level:3,title:"Solution",slug:"solution-2",children:[]}]},{level:2,title:"Deletion in a BST - Introduction",slug:"deletion-in-a-bst-introduction",children:[]},{level:2,title:"Delete Node in a BST",slug:"delete-node-in-a-bst",children:[{level:3,title:"Solution",slug:"solution-3",children:[]}]},{level:2,title:"Conclusion",slug:"conclusion",children:[]},{level:2,title:"Kth Largest Element in a Stream",slug:"kth-largest-element-in-a-stream",children:[{level:3,title:"Solution",slug:"solution-4",children:[]}]},{level:2,title:"Lowest Common Ancestor of a Binary Search Tree",slug:"lowest-common-ancestor-of-a-binary-search-tree",children:[{level:3,title:"Solution",slug:"solution-5",children:[]}]},{level:2,title:"Contains Duplicate III",slug:"contains-duplicate-iii",children:[{level:3,title:"Solution",slug:"solution-6",children:[]}]}],git:{},filePathRelative:"blogs/C++/Binary Search Tree(BST).md"}},9371:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="binary-search-tree-bst" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-bst" aria-hidden="true">#</a> Binary Search Tree(BST)</h2><p>A <code>Binary Search Tree</code> is a special form of a binary tree. The value in each node must be <code>greater than</code> (or equal to) any values in its <code>left subtree</code> but <code>less than</code> (or equal to) any values in its <code>right subtree</code>.</p><ol><li>Understand the <code>properties</code> of a binary tree;</li><li>Be able to do <code>basic operations</code> in a binary search tree;</li><li>Understand the concept of a <code>height-balanced binary search tree</code>.</li></ol><h2 id="definition-of-the-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#definition-of-the-binary-search-tree" aria-hidden="true">#</a> Definition of the Binary Search Tree</h2><p>Like a normal binary tree, we can traverse a BST in preorder, inorder, postorder or level-order. However, it is noteworthy that <code>inorder traversal</code> in BST will be in <code>ascending order</code>. Therefore, the inorder traversal is the most frequent used traversal method of a BST.</p><img src="https://leetcode.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/140/introduction-to-a-bst/Figures/binary_search_tree/BST_example.png" alt="alknzxc" style="zoom:50%;"><h2 id="validate-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#validate-binary-search-tree" aria-hidden="true">#</a> Validate Binary Search Tree</h2><p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p><p><img src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg" alt="zxcasd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [2,1,3]\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg" alt="sfdkjvc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="solution-inorder-traversal" tabindex="-1"><a class="header-anchor" href="#solution-inorder-traversal" aria-hidden="true">#</a> <strong>Solution-inorder traversal</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> true<span class="token punctuation">;</span>   \n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="binary-search-tree-iterator" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-iterator" aria-hidden="true">#</a> Binary Search Tree Iterator</h2><p><img src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" alt="asdkjnzxc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input\n[&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass BSTIterator <span class="token punctuation">{</span>\nprivate<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> pos<span class="token punctuation">;</span> <span class="token comment">// signal</span>\n    \n    <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\npublic<span class="token operator">:</span>\n    <span class="token function">BSTIterator</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// return next item of arr</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    bool <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// meaning still have elements of arr.</span>\n        <span class="token keyword">return</span> pos<span class="token operator">!=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj-&gt;next();\n * bool param_2 = obj-&gt;hasNext();\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="basic-operations-in-bst" tabindex="-1"><a class="header-anchor" href="#basic-operations-in-bst" aria-hidden="true">#</a> Basic Operations in BST</h2><ol><li>Understand how to do search, insertion or deletion in a BST;</li><li>Implement search, insertion and deletion in a BST recursively and iteratively;</li><li>Understand the relationship among the number of the nodes, the height of the tree and the complexity of the operations.</li></ol><p>According to the property of BST, for each node:</p><ol><li>return the node if the target value is <em><strong>equal to</strong></em> the value of the node;</li><li>continue searching in the <em><strong>left</strong></em> subtree if the target value is <em><strong>less than</strong></em> the value of the node;</li><li>continue searching in the <em><strong>right</strong></em> subtree if the target value is <em><strong>larger than</strong></em> the value of the node.</li></ol><h2 id="search-in-a-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#search-in-a-binary-search-tree" aria-hidden="true">#</a> Search in a Binary Search Tree</h2><img src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg" alt="zxclkna" style="zoom:67%;"><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg" alt="zlkxcnlksdf"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [4,2,7,1,3], val = 5\nOutput: []\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>\n         <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>        \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="insertion-in-a-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#insertion-in-a-binary-search-tree" aria-hidden="true">#</a> Insertion in a Binary Search Tree</h2><p>Similar to our search strategy, for each node, we will:</p><ol><li>search the left or right subtrees according to the relation of the value of the node and the value of our target node;</li><li>repeat STEP 1 until reaching an external node;</li><li>add the new node as its left or right child depending on the relation of the value of the node and the value of our target node.</li></ol><p><img src="https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg" alt="alksdv"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><img src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg" alt="asdzxcwer" style="zoom:67%;"><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution-2" tabindex="-1"><a class="header-anchor" href="#solution-2" aria-hidden="true">#</a> <strong>Solution</strong></h3><p><strong>similar to search</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n       if(!root){\n            return new TreeNode(val);\n        }\n        if(root-&gt;val &lt; val)\n        {\n            root-&gt;right = insertIntoBST(root-&gt;right,val);\n            \n        }\n        else{\n            root-&gt;left = insertIntoBST(root-&gt;left,val);\n        }\n        \n        return root;\n        \n    }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="deletion-in-a-bst-introduction" tabindex="-1"><a class="header-anchor" href="#deletion-in-a-bst-introduction" aria-hidden="true">#</a> Deletion in a BST - Introduction</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. If the target node has no child, we can simply remove the node.\n2. If the target node has one child, we can use its child to replace itself.\n3. If the target node has two children, replace the node with its in-order successor or predecessor node and delete that node.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/01/25/bst_deletion_case_1.png" alt="asdlkxhcv" style="zoom:67%;"><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/01/25/bst_deletion_case_2.png" alt="as234"></p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/01/25/bst_deletion_case_3.png" alt="kjbcvkjb34"></p><h2 id="delete-node-in-a-bst" tabindex="-1"><a class="header-anchor" href="#delete-node-in-a-bst" aria-hidden="true">#</a> Delete Node in a BST</h2><p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg" alt="skjxbfkjf"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg" alt="lksno2i34"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [], key = 0\nOutput: []\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution-3" tabindex="-1"><a class="header-anchor" href="#solution-3" aria-hidden="true">#</a> <strong>Solution</strong></h3><p><strong>good exercise</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    <span class="token keyword">int</span> <span class="token function">findminfromright</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// find the min of right child</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token operator">!=</span>nullptr<span class="token punctuation">)</span>\n            root<span class="token operator">=</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token comment">// case 1:have one child</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                <span class="token comment">// case 2: have 2 child then find min of right,max of left.</span>\n                root<span class="token operator">-&gt;</span>val<span class="token operator">=</span><span class="token function">findminfromright</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token comment">//by this recursion call we are removing the depulicate by passing the root-&gt;right and the same value that are in the root-&gt;right</span>\n                root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>In other word, for each node in a BST, if <code>m</code> nodes in the right subtree, the node itself is the <code>m + 1</code> largest element in the existed array.</p><h2 id="kth-largest-element-in-a-stream" tabindex="-1"><a class="header-anchor" href="#kth-largest-element-in-a-stream" aria-hidden="true">#</a> Kth Largest Element in a Stream</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input\n[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="solution-4" tabindex="-1"><a class="header-anchor" href="#solution-4" aria-hidden="true">#</a> <strong>Solution</strong></h3><p>DON&#39;T like this .</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class KthLargest <span class="token punctuation">{</span>\n\npublic<span class="token operator">:</span>\npriority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n<span class="token punctuation">;</span>\n    <span class="token function">KthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        n<span class="token operator">=</span>k<span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ele <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                \n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj-&gt;add(val);\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="lowest-common-ancestor-of-a-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#lowest-common-ancestor-of-a-binary-search-tree" aria-hidden="true">#</a> Lowest Common Ancestor of a Binary Search Tree</h2><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" alt="sxzkcjbskd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" alt="zlkxncoi23"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [2,1], p = 2, q = 1\nOutput: 2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution-5" tabindex="-1"><a class="header-anchor" href="#solution-5" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */</span>\n\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p or root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>val and q<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span>  <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val and q<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="contains-duplicate-iii" tabindex="-1"><a class="header-anchor" href="#contains-duplicate-iii" aria-hidden="true">#</a> Contains Duplicate III</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,2,3,1], k = 3, t = 0\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,0,1,1], k = 1, t = 2\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution-6" tabindex="-1"><a class="header-anchor" href="#solution-6" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n\n    multiset<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span> kelements<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> kend <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> currentNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// remove ith element from the window</span>\n        <span class="token keyword">auto</span> curItr <span class="token operator">=</span> kelements<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>currentNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>curItr <span class="token operator">!=</span> kelements<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> kelements<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>curItr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// this inserts K elements when i = 0 and only 1 element for each subsequent iteration</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>kelements<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> kend <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            kelements<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>kend<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            kend<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// we need to find a number that is between currentNum - t and currentNum + t</span>\n        <span class="token comment">// so the smallest numer greater than or equal to currentNum - t should be our candidate</span>\n        <span class="token comment">// an alternate way is to find the largest number less than or equal to currentNum + t</span>\n        <span class="token keyword">auto</span> closest <span class="token operator">=</span> kelements<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>currentNum <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// it is possible that no such number exists</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>closest <span class="token operator">==</span> kelements<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// check for the condition on the potential candidate</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>currentNum <span class="token operator">-</span> <span class="token operator">*</span>closest<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>',76),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])}}]);