"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5973],{8855:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-36574da2",path:"/blogs/Golang/Go%E5%B9%B6%E5%8F%91.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Go并发",slug:"go并发",children:[]},{level:2,title:"Goroutine",slug:"goroutine",children:[]},{level:2,title:"Channel",slug:"channel",children:[]},{level:2,title:"有缓冲的channel",slug:"有缓冲的channel",children:[]},{level:2,title:"Channel方向",slug:"channel方向",children:[]},{level:2,title:"Select-多路复用",slug:"select-多路复用",children:[]}],git:{},filePathRelative:"blogs/Golang/Go并发.md"}},19:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="go并发" tabindex="-1"><a class="header-anchor" href="#go并发" aria-hidden="true">#</a> Go并发</h2><p>C++并发不行的部分就要上升到Go来处理，这也是为什么Go逐渐流行的原因。它成为了编写 Docker、Kubernetes 和 Terraform 等其他软件的理想之选。<strong>在开始了解 Go 中并发的工作原理之前，你可能需要忘记从其他编程语言中已经了解的知识。 Go 使用的方法截然不同。</strong></p><p><strong>Go 有两种编写并发程序的样式。 一种是在其他语言中通过线程实现的传统样式。 在本模块中，你将了解 Go 的样式，其中值是在称为 goroutine 的独立活动之间传递的，以与进程进行通信。</strong></p><h2 id="goroutine" tabindex="-1"><a class="header-anchor" href="#goroutine" aria-hidden="true">#</a> Goroutine</h2><p>goroutine 是轻量线程中的并发活动，而不是在操作系统中进行的传统活动。 假设你有一个写入输出的程序和另一个计算两个数字相加的函数。 一个并发程序可以有数个 goroutine 同时调用这两个函数。</p><p><strong>显然main就是一共Goroutine，如果想创建其他Goroutine则需关键字<code>go</code></strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// Be careful</span>\n    <span class="token keyword">go</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 比较习惯是使用匿名函数来创建</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>一般来说都会带一个体验并发的例子，然后体验输出的差异...<s>其实这个例子很坑我不想带进来</s></strong></p><p><strong>打个预防针，需要注意的是，这里包括下面channel看一下使用例子就好了，先别跟他的思路走，看个方法使用过程就好</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;net/http&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token comment">// 定义一系列测试api</span>\n    apis <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n        <span class="token string">&quot;https://management.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://dev.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://outlook.office.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.somewhereintheinternet.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://graph.microsoft.com&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\t<span class="token comment">// 定义一个函数好让go个东西</span>\n   <span class="token keyword">func</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: %s is down!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 循环，创建Goroutine</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> api <span class="token operator">:=</span> <span class="token keyword">range</span> apis <span class="token punctuation">{</span>\n    <span class="token keyword">go</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n    \n\t<span class="token comment">// 计时，留个坑，这里你会发现时间很快</span>\n    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Done! It took %v seconds!\\n&quot;</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h2><p>channel 是发送和接收数据的通信机制，<strong>你只能发送 channel 支持的数据类型，关键字 <code>chan</code> 作为 channel 的数据类型</strong></p><p><strong>要创建 channel，需使用内置的 <code>make()</code> 函数</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>一个 channel 可以执行两项操作：发送数据和接收数据。 若要指定 channel 具有的操作类型，需要使用 channel 运算符 <code>&lt;-</code> 。 channel 仅发送数据，则必须在 channel <code>之后</code>使用 <code>&lt;-</code> 运算符。 如果希望 channel 接收数据，则必须在 channel <code>之前</code>使用 <code>&lt;-</code> 运算符</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// channel的反人类运算符&lt;-</span>\n<span class="token comment">// 接受数据在channel变量前面，发送在channel变量后面</span>\nch <span class="token operator">&lt;-</span> x <span class="token comment">// sends (or write) x through channel ch</span>\nx <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch <span class="token comment">// x receives (or reads) data sent to the channel ch</span>\n<span class="token operator">&lt;-</span>ch <span class="token comment">// receives data, but the result is discarded</span>\n<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token comment">// 关闭Channel，这么人性的go咋不会智能回收</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 重构一下checkAPI()</span>\n<span class="token comment">// 有了参数，开始坏起来了</span>\n<span class="token keyword">func</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api <span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 利用channel来通信,发送在channel后面</span>\n        ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: %s is down!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS: %s is up and running!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> api <span class="token operator">:=</span> <span class="token keyword">range</span> apis <span class="token punctuation">{</span>\n    <span class="token keyword">go</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 接受数据运算符在前面</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ERROR: https://api.somewhereintheinternet.com/ is down!\n\nDone! It took 0.007401217 seconds!\n结果是失败的\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>分析一下原因，如果按我们想的正常逻辑是，我们<code>make</code> 创建了channel，for里面创建了5个goroutine，那么怎么会这样呢？</strong></p><p><strong>原因：<code>make</code>是个坑，会创建无缓冲channel，这样的channel会阻止发送操作，直到有人准备好接受数据，然后<code>fmt.Print(&lt;-ch)</code>会阻止程序，因为它从channel读取，等待数据到达才能执行它的操作，其他goroutine都在运行，但没有监听，由于程序提前走完，goroutine无法发送数据</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 假如我们加多一个fmt.Print(&lt;-ch)</span>\nch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> api <span class="token operator">:=</span> <span class="token keyword">range</span> apis <span class="token punctuation">{</span>\n    <span class="token keyword">go</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n<span class="token comment">// ERROR: https://api.somewhereintheinternet.com/ is down!</span>\n<span class="token comment">// SUCCESS: https://api.github.com is up and running!</span>\n<span class="token comment">// Done! It took 0.263611711 seconds!</span>\n<span class="token comment">// 再多点？</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n\nfmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n<span class="token comment">// 程序会全部打印出来，但是程序未结束</span>\n<span class="token comment">// 因为前面说过了fmt.打印会阻止程序，它没有收到数据</span>\n<span class="token comment">// 典型拿不到资源死锁了。</span>\n<span class="token comment">// 加一个限制？加在哪？思考一下</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 版本答案来了,其实啰嗦的很，等下我总结一下</span>\n<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;net/http&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    apis <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n        <span class="token string">&quot;https://management.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://dev.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://outlook.office.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.somewhereintheinternet.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://graph.microsoft.com&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\n    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> api <span class="token operator">:=</span> <span class="token keyword">range</span> apis <span class="token punctuation">{</span>\n        <span class="token keyword">go</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\t<span class="token comment">// 预防死锁</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>apis<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Done! It took %v seconds!\\n&quot;</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api <span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: %s is down!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS: %s is up and running!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ERROR: https://api.somewhereintheinternet.com/ is down!\nSUCCESS: https://api.github.com is up and running!\nSUCCESS: https://management.azure.com is up and running!\nSUCCESS: https://dev.azure.com is up and running!\nSUCCESS: https://graph.microsoft.com is up and running!\nSUCCESS: https://outlook.office.com/ is up and running!\nDone! It took 0.602099714 seconds!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>显然，<code>无缓冲channel</code>同步了接受和发送操作，即使是并发，通信也是同步的</strong></p><p><strong>但是上面的这个例子我感觉很容易带偏思维，而且坑也很多，绕来绕去就是想讲一个避免资源死锁的问题，<s>还是自己故意疏忽创建的</s>，典型的为了操作而操作，大家知道一个使用方法和发送、接受操作就行了，具体处理肯定摸索不了的</strong></p><h2 id="有缓冲的channel" tabindex="-1"><a class="header-anchor" href="#有缓冲的channel" aria-hidden="true">#</a> 有缓冲的channel</h2><p><strong>其实，我初见<code>缓冲</code>这个词，人是楞了一下的，是指资源还是？但是具体意思不是这个</strong></p><blockquote><p>默认情况下 channel 是无缓冲行为。 这意味着只有存在接收操作时，它们才接受发送操作。 否则，程序将永久被阻止等待。</p></blockquote><p><strong>好家伙，可知道这是啥了吧？</strong></p><p><strong>现实中，我们使用到无缓冲的channel是比较严谨的情况，万一犯错，造成的后果很严重的，很多时候仅需要一个并发而已</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 更改一下默认属性</span>\nch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>这里的<code>10</code>相当于队列的容量，当发送数据时，元素添加进队列，队列满则等待</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 一个列子说明容错性</span>\n<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;net/http&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    apis <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n        <span class="token string">&quot;https://management.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://dev.azure.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://outlook.office.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://api.somewhereintheinternet.com/&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;https://graph.microsoft.com&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\n    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> api <span class="token operator">:=</span> <span class="token keyword">range</span> apis <span class="token punctuation">{</span>\n        <span class="token keyword">go</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>apis<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Done! It took %v seconds!\\n&quot;</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">checkAPI</span><span class="token punctuation">(</span>api <span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: %s is down!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS: %s is up and running!\\n&quot;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="channel方向" tabindex="-1"><a class="header-anchor" href="#channel方向" aria-hidden="true">#</a> Channel方向</h2><p><strong>规范是一个语言的必经之路，Channel不能说一个冲到底，划分好接受和发送的channel，生成库公开只读，便于保持一致性</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span> <span class="token comment">// it&#39;s a channel to only send data</span>\n<span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">// it&#39;s a channel to only receive data</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="select-多路复用" tabindex="-1"><a class="header-anchor" href="#select-多路复用" aria-hidden="true">#</a> Select-多路复用</h2><p>使用 <code>select</code> 关键字的同时与多个 channel 交互</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>\n    ch <span class="token operator">&lt;-</span> <span class="token string">&quot;Done processing!&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">replicate</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>\n    ch <span class="token operator">&lt;-</span> <span class="token string">&quot;Done replicating!&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token function">process</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token function">replicate</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 相当于switch老大哥</span>\n        <span class="token keyword">select</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> process <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span>\n        <span class="token keyword">case</span> replicate <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>replicate<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Done replicating!</span>\n<span class="token comment">// Done processing!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div>',39),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);