(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{498:function(s,n,a){"use strict";a.r(n);var t=a(4),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"算法基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[s._v("#")]),s._v(" 算法基础")]),s._v(" "),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[s._v("#")]),s._v(" 枚举")]),s._v(" "),a("p",[s._v("枚举（英语：Enumerate）是基于已有知识来猜测答案的一种问题求解策略。")]),s._v(" "),a("p",[s._v("枚举的思想是不断地猜测，从可能的集合中一一尝试，然后再判断题目的条件是否成立。")]),s._v(" "),a("h3",{attrs:{id:"要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[s._v("#")]),s._v(" 要点")]),s._v(" "),a("h3",{attrs:{id:"给出解空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给出解空间"}},[s._v("#")]),s._v(" "),a("strong",[s._v("给出解空间")])]),s._v(" "),a("p",[a("strong",[s._v("建立简洁的数学模型")])]),s._v(" "),a("p",[a("strong",[s._v("枚举的适合要想清楚：可能的情况是什么？枚举哪些要素？")])]),s._v(" "),a("h3",{attrs:{id:"减少枚举的空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少枚举的空间"}},[s._v("#")]),s._v(" 减少枚举的空间")]),s._v(" "),a("p",[a("strong",[s._v("枚举的范围是什么？是所有的内容都需要枚举吗？")])]),s._v(" "),a("p",[a("strong",[s._v("再用枚举法解决问题的适合，一定要想清楚这两件事，否者会带来不必要的开销。")])]),s._v(" "),a("h3",{attrs:{id:"选择合适的枚举顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的枚举顺序"}},[s._v("#")]),s._v(" 选择合适的枚举顺序")]),s._v(" "),a("p",[a("strong",[s._v("根据题目判断。比如例题中要求的是最大的符合条件的素数，那自然是从小到大枚举比较合适。")])]),s._v(" "),a("h3",{attrs:{id:"例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例题"}},[s._v("#")]),s._v(" 例题")]),s._v(" "),a("p",[s._v("一个数组中的数互不相同，求其中和为 0的数对的个数")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("枚举两个数的代码很容易就可以写出来。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for (int i = 0; i < n; ++i)\n  for (int j = 0; j < n; ++j)\n    if (a[i] + a[j] == 0) ++ans;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("来看看枚举的范围如何优化。原问题的答案由两部分构成：两个数相等的情况和不相等的情况。相等的情况只需要枚举每一个数判断一下是否合法。至于不相等的情况，由于题中没要求数对是有序的，答案就是有序的情况的两倍（考虑如果 "),a("code",[s._v("(a, b)")]),s._v(" 是答案，那么 "),a("code",[s._v("(b, a)")]),s._v(" 也是答案）。对于这种情况，只需统计人为要求有顺序之后的答案，最后再乘上 2就好了。")]),s._v(" "),a("p",[s._v("不妨要求第一个数要出现在靠前的位置。代码如下：")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for (int i = 0; i < n; ++i)\n  for (int j = 0; j < i; ++j)\n    if (a[i] + a[j] == 0) ++ans;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("不难发现这里已经减少了 的枚举范围，减少了这段代码的时间开销。")]),s._v(" "),a("p",[s._v("然而这并不是最优的结果。")]),s._v(" "),a("p",[s._v("两个数是否都一定要枚举出来呢？枚举其中一个数之后，题目的条件已经确定了其他的要素（另一个数），如果能找到一种方法直接判断题目要求的那个数是否存在，就可以省掉枚举后一个数的时间了。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 要求 a 数组中的数的绝对值都小于 MAXN\nbool met[MAXN * 2];\n// 初始化 met 数组为 0；\nmemset(met, 0, sizeof(met));\nfor (int i = 0; i < n; ++i) {\n  if (met[MAXN - a[i]]) ++ans;\n  // 为了避免负数下标\n  met[a[i] + MAXN] = 1;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("PS:我也没想明白咋优化的，提示：当a是桶数组")])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"递归-分治"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归-分治"}},[s._v("#")]),s._v(" 递归&分治")]),s._v(" "),a("p",[a("strong",[s._v("递归（英语：Recursion），在数学和计算机科学中是指在函数的定义中使用函数自身的方法，在计算机科学中还额外指一种通过重复将问题分解为同类的子问题而解决问题的方法。")])]),s._v(" "),a("p",[a("strong",[s._v("分治（英语：Divide and Conquer），字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。")])]),s._v(" "),a("h3",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[s._v("#")]),s._v(" 递归")]),s._v(" "),a("blockquote",[a("p",[s._v("要理解递归，就得先理解什么是递归。")])]),s._v(" "),a("p",[s._v("递归的基本思想是某个函数直接或者间接地调用自身，这样原问题的求解就转换为了许多性质相同但是规模更小的子问题。求解时只需要关注如何把原问题划分成符合条件的子问题，而不需要过分关注这个子问题是如何被解决的。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int func(传入数值) {\n  if (终止条件) return 最小子问题解;\n  return func(缩小规模);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//不使用递归的归并排序算法\ntemplate <typename T>\nvoid merge_sort(vector<T> a) {\n  int n = a.size();\n  for (int seg = 1; seg < n; seg = seg + seg)\n    for (int start = 0; start < n - seg; start += seg + seg)\n      merge(a, start, start + seg - 1, std::min(start + seg + seg - 1, n - 1));\n}\n\n//使用递归的归并排序算法\ntemplate <typename T>\nvoid merge_sort(vector<T> a, int front, int end) {\n  if (front >= end) return;\n  int mid = front + (end - front) / 2;\n  merge_sort(a, front, mid);\n  merge_sort(a, mid + 1, end);\n  merge(a, front, mid, end);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h4",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("p",[s._v("在程序执行中，递归是利用堆栈来实现的。每当进入一个函数调用，栈就会增加一层栈帧，每次函数返回，栈就会减少一层栈帧。而栈不是无限大的，当递归层数过多时，就会造成 "),a("strong",[s._v("栈溢出")]),s._v(" 的后果。")]),s._v(" "),a("p",[s._v("显然有时候递归处理是高效的，比如归并排序；"),a("strong",[s._v("有时候是低效的")]),s._v("，比如数孙悟空身上的毛，因为堆栈会消耗额外空间，而简单的递推不会消耗空间。比如这个例子，给一个链表头，计算它的长度：")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 典型的递推遍历框架\nint size(Node *head) {\n  int size = 0;\n  for (Node *p = head; p != nullptr; p = p->next) size++;\n  return size;\n}\n\n// 我就是要写递归，递归天下第一\nint size_recurison(Node *head) {\n  if (head == nullptr) return 0;\n  return size_recurison(head->next) + 1;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h4",{attrs:{id:"递归优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归优化"}},[s._v("#")]),s._v(" 递归优化")]),s._v(" "),a("p",[s._v("主页面："),a("a",{attrs:{href:"https://oi-wiki.org/search/opt/",target:"_blank",rel:"noopener noreferrer"}},[s._v("搜索优化"),a("OutboundLink")],1),s._v(" 和 "),a("a",{attrs:{href:"https://oi-wiki.org/dp/memo/",target:"_blank",rel:"noopener noreferrer"}},[s._v("记忆化搜索"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("比较初级的递归实现可能递归次数太多，容易超时。这时需要对递归进行优化。")]),s._v(" "),a("h4",{attrs:{id:"分治算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[s._v("#")]),s._v(" 分治算法")]),s._v(" "),a("p",[s._v("大概的流程可以分为三步：分解 -> 解决 -> 合并。")]),s._v(" "),a("ol",[a("li",[s._v("分解原问题为结构相同的子问题。")]),s._v(" "),a("li",[s._v("分解到某个容易求解的边界之后，进行递归求解。")]),s._v(" "),a("li",[s._v("将子问题的解合并成原问题的解。")])]),s._v(" "),a("p",[s._v("分治法能解决的问题一般有如下特征：")]),s._v(" "),a("ul",[a("li",[s._v("该问题的规模缩小到一定的程度就可以容易地解决。")]),s._v(" "),a("li",[s._v("该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质，利用该问题分解出的子问题的解可以合并为该问题的解。")]),s._v(" "),a("li",[s._v("该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果各子问题是不独立的，则分治法要重复地解公共的子问题，也就做了许多不必要的工作。此时虽然也可用分治法，但一般用 "),a("a",{attrs:{href:"https://oi-wiki.org/dp/basic/",target:"_blank",rel:"noopener noreferrer"}},[s._v("动态规划"),a("OutboundLink")],1),s._v(" 较好。")])]),s._v(" "),a("p",[s._v("以归并排序为例。假设实现归并排序的函数名为 "),a("code",[s._v("merge_sort")]),s._v("。明确该函数的职责，即 "),a("strong",[s._v("对传入的一个数组排序")]),s._v("。这个问题显然可以分解。给一个数组排序等于给该数组的左右两半分别排序，然后合并成一个数组。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("void merge_sort(一个数组) {\n  if (可以很容易处理) return;\n  merge_sort(左半个数组);\n  merge_sort(右半个数组);\n  merge(左半个数组, 右半个数组);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("传给它半个数组，那么处理完后这半个数组就已经被排好了。注意到，"),a("code",[s._v("merge_sort")]),s._v(" 与二叉树的后序遍历模板极其相似。因为分治算法的套路是 "),a("strong",[s._v("分解 -> 解决（触底）-> 合并（回溯）")]),s._v("，先左右分解，再处理合并，回溯就是在退栈，即相当于后序遍历。")]),s._v(" "),a("h4",{attrs:{id:"要点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点-2"}},[s._v("#")]),s._v(" 要点")]),s._v(" "),a("h5",{attrs:{id:"写递归的要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写递归的要点"}},[s._v("#")]),s._v(" 写递归的要点")]),s._v(" "),a("p",[a("strong",[s._v("明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，")]),s._v(" 否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。")]),s._v(" "),a("p",[s._v("以遍历二叉树为例")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("void traverse(TreeNode* root) {\n  if (root == nullptr) return;\n  traverse(root->left);\n  traverse(root->right);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这几行代码就足以遍历任何一棵二叉树了。对于递归函数 "),a("code",[s._v("traverse(root)")]),s._v("，只要相信给它一个根节点 "),a("code",[s._v("root")]),s._v("，它就能遍历这棵树。所以只需要把这个节点的左右节点再传给这个函数就行了。")]),s._v(" "),a("p",[s._v("同样扩展到遍历一棵 N 叉树。与二叉树的写法一模一样。不过，对于 N 叉树，显然没有中序遍历。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("void traverse(TreeNode* root) {\n  if (root == nullptr) return;\n  for (child : root->children) traverse(child);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("h5",{attrs:{id:"递归与枚举的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归与枚举的区别"}},[s._v("#")]),s._v(" 递归与枚举的区别")]),s._v(" "),a("p",[s._v("递归和枚举的区别在于：枚举是横向地把问题划分，然后依次求解子问题；而递归是把问题逐级分解，是纵向的拆分。")]),s._v(" "),a("h5",{attrs:{id:"递归与分治的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归与分治的区别"}},[s._v("#")]),s._v(" 递归与分治的区别")]),s._v(" "),a("p",[s._v("递归是一种编程技巧，一种解决问题的思维方式；分治算法很大程度上是基于递归的，解决更具体问题的算法思想。")]),s._v(" "),a("h4",{attrs:{id:"例题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例题-2"}},[s._v("#")]),s._v(" 例题")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("给定一个二叉树，它的每个结点都存放着一个整数值。")]),s._v(" "),a("p",[s._v("找出路径和等于给定数值的路径总数。")]),s._v(" "),a("p",[s._v("路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。")]),s._v(" "),a("p",[s._v("二叉树不超过 1000 个节点，且节点数值范围是[-1000000,1000000]的整数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n\n返回 3。和等于 8 的路径有：\n\n1.  5 -> 3\n2.  5 -> 2 -> 1\n3. -3 -> 11\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 二叉树结点的定义\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("参考代码")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int pathSum(TreeNode *root, int sum) {\n  if (root == nullptr) return 0;\n  return count(root, sum) + pathSum(root->left, sum) +\n         pathSum(root->right, sum);\n}\n\nint count(TreeNode *node, int sum) {\n  if (node == nullptr) return 0;\n  return (node->val == sum) + count(node->left, sum - node->val) +\n         count(node->right, sum - node->val);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("题目看起来很复杂，不过代码却极其简洁。")]),s._v(" "),a("p",[s._v("首先明确，递归求解树的问题必然是要遍历整棵树的，所以二叉树的遍历框架（分别对左右子树递归调用函数本身）必然要出现在主函数 pathSum 中。那么对于每个节点，它们应该干什么呢？它们应该看看，自己和它们的子树包含多少条符合条件的路径。好了，这道题就结束了。")]),s._v(" "),a("p",[s._v("按照前面说的技巧，根据刚才的分析来定义清楚每个递归函数应该做的事：")]),s._v(" "),a("p",[a("code",[s._v("PathSum")]),s._v(" 函数：给定一个节点和一个目标值，返回以这个节点为根的树中，和为目标值的路径总数。")]),s._v(" "),a("p",[a("code",[s._v("count")]),s._v(" 函数：给定一个节点和一个目标值，返回以这个节点为根的树中，能凑出几个以该节点为路径开头，和为目标值的路径总数。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int pathSum(TreeNode *root, int sum) {\n  if (root == nullptr) return 0;\n  int pathImLeading = count(root, sum);  // 自己为开头的路径数\n  int leftPathSum = pathSum(root->left, sum);  // 左边路径总数（相信它能算出来）\n  int rightPathSum =\n      pathSum(root->right, sum);  // 右边路径总数（相信它能算出来）\n  return leftPathSum + rightPathSum + pathImLeading;\n}\nint count(TreeNode *node, int sum) {\n  if (node == nullptr) return 0;\n  // 能不能作为一条单独的路径呢？\n  int isMe = (node->val == sum) ? 1 : 0;\n  // 左边的，你那边能凑几个 sum - node.val ？\n  int leftNode = count(node->left, sum - node->val);\n  // 右边的，你那边能凑几个 sum - node.val ？\n  int rightNode = count(node->right, sum - node->val);\n  return isMe + leftNode + rightNode;  // 我这能凑这么多个\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("还是那句话，"),a("strong",[s._v("明白每个函数能做的事，并相信它们能够完成。")])]),s._v(" "),a("p",[s._v("总结下，"),a("code",[s._v("PathSum")]),s._v(" 函数提供了二叉树遍历框架，在遍历中对每个节点调用 "),a("code",[s._v("count")]),s._v(" 函数（这里用的是先序遍历，不过中序遍历和后序遍历也可以）。"),a("code",[s._v("count")]),s._v(" 函数也是一个二叉树遍历，用于寻找以该节点开头的目标值路径。")])])])}),[],!1,null,null,null);n.default=e.exports}}]);