"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5434],{626:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-442bdcbb",path:"/blogs/Golang/Go%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%8E%A7%E5%88%B6%E6%B5%81.html",title:"",lang:"en-US",frontmatter:{},excerpt:"\x3c!-- ---\ntitle: Golang控制流\ndate: 2021-04-12\ntags:\n  - Golang\ncategories:\n  - Golang\n--- --\x3e\n<p>快速阅读，留意与其他语言不同点就可以了。</p>\n",headers:[{level:3,title:"if语句",slug:"if语句",children:[]},{level:3,title:"Switch",slug:"switch",children:[]},{level:3,title:"for循环",slug:"for循环",children:[]},{level:3,title:"defer函数",slug:"defer函数",children:[]},{level:3,title:"panic函数",slug:"panic函数",children:[]},{level:3,title:"recover函数",slug:"recover函数",children:[]}],git:{},filePathRelative:"blogs/Golang/Go中使用控制流.md"}},4743:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var p=a(6252);const t=(0,p._)("p",null,"快速阅读，留意与其他语言不同点就可以了。",-1),e=(0,p._)("h3",{id:"if语句",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#if语句","aria-hidden":"true"},"#"),(0,p.Uk)(" if语句")],-1),o=(0,p.Uk)("在 Go 中，你不需要在条件中使用括号。 "),c=(0,p._)("code",null,"else",-1),l=(0,p.Uk)(" 子句可选。 但是，大括号仍然是必需的。 此外，为了减少行，Go 不支持"),u={href:"http://en.wikipedia.org/wiki/%3F:",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("三元 "),r=(0,p._)("code",null,"if",-1),k=(0,p.Uk)(" 语句"),b=(0,p.Uk)("，因此每次都需要编写完整的 "),m=(0,p._)("code",null,"if",-1),g=(0,p.Uk)(" 语句。"),d=(0,p.uE)('<div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    x <span class="token operator">:=</span> <span class="token number">27</span>\n    <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;is even&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>复合if语句</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">givemeanumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 注意num作用域是在if里，如果在if之外的作用域调用num，则会报错</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> num <span class="token operator">:=</span> <span class="token function">givemeanumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&quot;is negative&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&quot;has only one digit&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&quot;has multiple digits&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> <strong>Switch</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;math/rand&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sec <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span>\n    i <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Int31n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n\t<span class="token comment">// what if 有多个case值呢？</span>\n    <span class="token keyword">switch</span> i <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;zero...&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;one...&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;two...&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">location</span><span class="token punctuation">(</span>city <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> region <span class="token builtin">string</span>\n    <span class="token keyword">var</span> continent <span class="token builtin">string</span>\n    <span class="token keyword">switch</span> city <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Delhi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hyderabad&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mumbai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Chennai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kochi&quot;</span><span class="token punctuation">:</span>\n        region<span class="token punctuation">,</span> continent <span class="token operator">=</span> <span class="token string">&quot;India&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Asia&quot;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Lafayette&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Louisville&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Boulder&quot;</span><span class="token punctuation">:</span>\n        region<span class="token punctuation">,</span> continent <span class="token operator">=</span> <span class="token string">&quot;Colorado&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Irvine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Los Angeles&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;San Diego&quot;</span><span class="token punctuation">:</span>\n        region<span class="token punctuation">,</span> continent <span class="token operator">=</span> <span class="token string">&quot;California&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n        region<span class="token punctuation">,</span> continent <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Unknown&quot;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> region<span class="token punctuation">,</span> continent\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    region<span class="token punctuation">,</span> continent <span class="token operator">:=</span> <span class="token function">location</span><span class="token punctuation">(</span><span class="token string">&quot;Irvine&quot;</span><span class="token punctuation">)</span>\n    <span class="token comment">// what if 在switch调用函数呢？</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;John works in %s, %s\\n&quot;</span><span class="token punctuation">,</span> region<span class="token punctuation">,</span> continent<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s time to learn some Go.&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s weekend, time to rest!&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>一般来说运用正则在switch语句比较多</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">import</span> <span class="token string">&quot;regexp&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> email <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`^[^@]+@[^@.]+\\.[^@.]+`</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> phone <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`^[(]?[0-9][0-9][0-9][). \\-]*[0-9][0-9][0-9][.\\-]?[0-9][0-9][0-9][0-9]`</span><span class="token punctuation">)</span>\n\n    contact <span class="token operator">:=</span> <span class="token string">&quot;foo@bar.com&quot;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> email<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>contact<span class="token punctuation">,</span> <span class="token string">&quot;is an email&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> phone<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>contact<span class="token punctuation">,</span> <span class="token string">&quot;is a phone number&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>contact<span class="token punctuation">,</span> <span class="token string">&quot;is not recognized&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>如果我想省略条件，省去写一长串if-else？</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;math/rand&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> r <span class="token operator">&gt;</span> <span class="token number">0.1</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Common case, 90% of the time&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;10% of the time&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><em><em>我不想中断switch，但是想进入下一个case</em>（需要谨慎使用，有坑）？</em>*</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> num <span class="token operator">:=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is less than 50\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n        <span class="token keyword">fallthrough</span>\n    <span class="token keyword">case</span> num <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is greater than 100\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n        <span class="token keyword">fallthrough</span>\n    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is less than 200&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 输出的代码有错误,执行fallthrough后，跳过了第二个num&gt;100的判断</span>\n<span class="token comment">// 15 is less than 50</span>\n<span class="token comment">// 15 is greater than 100</span>\n<span class="token comment">// 15 is less than 200</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环" aria-hidden="true">#</a> <strong>for循环</strong></h3><p><strong>Go中没有while，只能用for代替，巨坑</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">:=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        sum <span class="token operator">+=</span> i\n    <span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum of 1..100 is&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="defer函数" tabindex="-1"><a class="header-anchor" href="#defer函数" aria-hidden="true">#</a> <strong>defer函数</strong></h3><p>一般用作文件关闭或者清理进程</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;deferred&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;regular&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// regular 1</span>\n<span class="token comment">// regular 2</span>\n<span class="token comment">// regular 3</span>\n<span class="token comment">// regular 4</span>\n<span class="token comment">// deferred -4</span>\n<span class="token comment">// deferred -3</span>\n<span class="token comment">// deferred -2</span>\n<span class="token comment">// deferred -1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="panic函数" tabindex="-1"><a class="header-anchor" href="#panic函数" aria-hidden="true">#</a> <strong>panic函数</strong></h3><p>运行时错误会使 Go 程序进入紧急状态。 可以强制程序进入紧急状态，但运行时错误（例如数组访问超出范围、取消对空指针的引用）也可能会导致进入紧急状态。</p><p>内置 <code>panic()</code> 函数会停止正常的控制流。 所有推迟的函数调用都会正常运行。 进程会在堆栈中继续，直到所有函数都返回。 然后，程序会崩溃并记录日志消息。 此消息包含错误和堆栈跟踪，有助于诊断问题的根本原因。</p><p>调用 <code>panic()</code> 函数时，可以添加任何值作为参数。 通常，你会发送一条错误消息，说明为什么会进入紧急状态。</p><p>将 <code>panic</code> 和 <code>defer</code> 函数组合起来，以了解控制流中断的方式</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">g</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Program finished successfully!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Panicking!&quot;</span><span class="token punctuation">)</span>\n        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Panic in g() (major)&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Defer in g()&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Printing in g()&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Printing in g() 0\nPrinting in g() 1\nPrinting in g() 2\nPrinting in g() 3\nPanicking!\nDefer in g() 3\nDefer in g() 2\nDefer in g() 1\nDefer in g() 0\npanic: Panic in g() (major)\n\ngoroutine 1 [running]:\nmain.g(0x4)\n        /Users/johndoe/go/src/helloworld/main.go:13 +0x22e\nmain.g(0x3)\n        /Users/johndoe/go/src/helloworld/main.go:17 +0x17a\nmain.g(0x2)\n        /Users/johndoe/go/src/helloworld/main.go:17 +0x17a\nmain.g(0x1)\n        /Users/johndoe/go/src/helloworld/main.go:17 +0x17a\nmain.g(0x0)\n        /Users/johndoe/go/src/helloworld/main.go:17 +0x17a\nmain.main()\n        /Users/johndoe/go/src/helloworld/main.go:6 +0x2a\nexit status 2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="recover函数" tabindex="-1"><a class="header-anchor" href="#recover函数" aria-hidden="true">#</a> <strong>recover函数</strong></h3><p>有时，你可能想要避免程序崩溃，改为在内部报告错误。 或者，你可能想要先清理混乱情况，然后再让程序崩溃。 例如，你可能想要关闭与某个资源的连接，以免出现更多问题。</p><p>Go 提供内置函数 <code>recover()</code>，允许你在出现紧急状况之后重新获得控制权。 只能在已推迟的函数中使用此函数。 如果调用 <code>recover()</code> 函数，则在正常运行的情况下，它会返回 <code>nil</code>，没有任何其他作用。</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered in main&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">g</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Program finished successfully!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Panicking!&quot;</span><span class="token punctuation">)</span>\n        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Panic in g() (major)&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Defer in g()&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Printing in g()&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Printing in g() 0\nPrinting in g() 1\nPrinting in g() 2\nPrinting in g() 3\nPanicking!\nDefer in g() 3\nDefer in g() 2\nDefer in g() 1\nDefer in g() 0\nRecovered in main Panic in g() (major)\n// 少了堆栈错误\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong><code>panic</code> 和 <code>recover</code> 的组合是 Go 处理异常的惯用方式。 其他编程语言使用 <code>try/catch</code> 块。 Go 首选此处所述的方法</strong></p>',32),f={},q=(0,a(3744).Z)(f,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,(0,p._)("p",null,[(0,p._)("strong",null,[o,c,l,(0,p._)("a",u,[i,r,k,(0,p.Wm)(a)]),b,m,g])]),d],64)}]])}}]);