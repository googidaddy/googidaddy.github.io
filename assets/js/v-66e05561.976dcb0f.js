"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[3616],{9716:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-66e05561",path:"/blogs/Python/%E9%87%8D%E6%9E%84%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95(fastapi).html",title:"重构项目记录(fastapi)",lang:"en-US",frontmatter:{title:"重构项目记录(fastapi)",date:"2021/08/08",tags:["fastapi"],categories:["Python"]},excerpt:"<p><strong>从WSGI到ASGI</strong></p>\n",headers:[{level:3,title:"简介",slug:"简介",children:[]},{level:3,title:"改造过程",slug:"改造过程",children:[]},{level:3,title:"总结",slug:"总结",children:[]}],git:{},filePathRelative:"blogs/Python/重构项目记录(fastapi).md"}},5519:(n,s,a)=>{a.r(s),a.d(s,{default:()=>I});var e=a(6252);const l=(0,e._)("p",null,[(0,e._)("strong",null,"从WSGI到ASGI")],-1),p=(0,e._)("h3",{id:"简介",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),(0,e.Uk)(" 简介")],-1),t=(0,e._)("p",null,[(0,e.Uk)("自从说了要从"),(0,e._)("code",null,"Flask"),(0,e.Uk)("到"),(0,e._)("code",null,"Fastapi"),(0,e.Uk)("转变，还要学习不同架构，ASGI作为非常优秀的异步框架，给我感觉就是如果你没学过python，那么建议你直接从python3直接学，而不是从python2开始...，本次是自底向上说明，方便理解。")],-1),r=(0,e._)("h3",{id:"改造过程",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#改造过程","aria-hidden":"true"},"#"),(0,e.Uk)(" 改造过程")],-1),o=(0,e.Uk)("此次的实验项目是之前的"),c={href:"https://github.com/googidaddy/bili_upload_tool",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("上传视频项目"),u=(0,e.Uk)("，由于是传统的"),d=(0,e._)("code",null,"WSGI",-1),k=(0,e.Uk)("架构，加上"),b=(0,e._)("code",null,"Flask",-1),m=(0,e.Uk)("是同步框架，调用上遇到异步的问题就头大。(思考要不要修改开发源代码...)"),h=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>--docker-compose.yaml\n--Docker-main\n----main.py\n----Dockerfile\n--nginx\n----nginx.conf\n----Dockerfile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="flask变fastapi" tabindex="-1"><a class="header-anchor" href="#flask变fastapi" aria-hidden="true">#</a> Flask变Fastapi</h4><p><strong>对比来说，改动地方不多，</strong></p>',3),g=(0,e._)("li",null,[(0,e._)("p",null,"首先用pipenv配置好Fastapi相关环境")],-1),_=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("把模板搭载放在了nginx，可以翻看"),(0,e._)("strong",null,"萌新nginx配置"),(0,e.Uk)("那一篇。")])],-1),y=(0,e.Uk)("增加"),f={href:"https://fastapi.tiangolo.com/tutorial/body/",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("请求验证"),v=(0,e.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel\n<span class="token comment"># 对数据有验证</span>\n<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    a<span class="token punctuation">:</span> <span class="token builtin">str</span>\n    b<span class="token punctuation">:</span> <span class="token builtin">str</span>\n    c<span class="token punctuation">:</span> <span class="token builtin">str</span>\n    d<span class="token punctuation">:</span> <span class="token builtin">str</span>\n<span class="token comment"># 去掉__main__程序里uvicorn启动程序</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),U=(0,e._)("li",null,[(0,e._)("p",null,"原来的数据处理部分变更成异步async/await")],-1),E=(0,e.uE)('<h4 id="增加nginx反向代理" tabindex="-1"><a class="header-anchor" href="#增加nginx反向代理" aria-hidden="true">#</a> 增加nginx反向代理</h4><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine</span>\n\n<span class="token instruction"><span class="token keyword">COPY</span> ./dist /usr/share/nginx/html/</span>\n\n<span class="token instruction"><span class="token keyword">COPY</span> nginx.conf /etc/nginx/conf.d/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>解释一下，我这里只是轻度使用，Alpine不会造成啥影响，反而轻量更适合，静态文件copy到nginx docker的默认html文件夹，copy自定义nginx配置文件到conf.d，不同于网上大部分教程是因为避免配置规则约束(同时他们也不会说清楚这一点)，网上大部分教程是nginx首要配置文件，需要遵循一定规范才能运行，咱不上纲上线，能跑就行。</strong></p><blockquote><p>ps：nginx配置在那个教程</p></blockquote><h4 id="增加docker-compose" tabindex="-1"><a class="header-anchor" href="#增加docker-compose" aria-hidden="true">#</a> 增加docker-compose</h4><p>使用docker-compose是一个 run container的一个更好替换，像配置nginx反向代理和api服务，应该隔离开两个容器。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">web</span><span class="token punctuation">:</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> nginx\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>\n\n  <span class="token key atrule">api</span><span class="token punctuation">:</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> Docker<span class="token punctuation">-</span>main\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> 9090<span class="token punctuation">:</span><span class="token number">9090</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>这次卡壳的主要是nginx的配置，网上教程不靠谱，一个一个坑都要自己踩过来，最后使用上，也需要自己去翻看uvicorn部署,<strong>有些默认配置的坑(--host --port)</strong>，</p>',9),w={},I=(0,a(3744).Z)(w,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,p,t,r,(0,e._)("p",null,[o,(0,e._)("a",c,[i,(0,e.Wm)(a)]),u,d,k,b,m]),h,(0,e._)("ul",null,[g,_,(0,e._)("li",null,[(0,e._)("p",null,[y,(0,e._)("a",f,[x,(0,e.Wm)(a)])]),v]),U]),E],64)}]])}}]);