"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[434],{4680:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0cf66c16",path:"/blogs/C++/C++%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80.html",title:"",lang:"en-US",frontmatter:{},excerpt:"\x3c!-- ---\ntitle: C++语法基础\ndate: 2021/03/20\ntags:\n  - c++\ncategories:\n  - C++\n--- --\x3e\n<p><strong>学习之路</strong>\n<strong>从上而下的学习一下C</strong>++</p>\n",headers:[{level:2,title:"代码框架",slug:"代码框架",children:[]},{level:2,title:"#define 命令",slug:"define-命令",children:[]},{level:2,title:"输入输出",slug:"输入输出",children:[]},{level:2,title:"变量",slug:"变量",children:[{level:3,title:"布尔类型",slug:"布尔类型",children:[]},{level:3,title:"字符型",slug:"字符型",children:[]},{level:3,title:"整型",slug:"整型",children:[]},{level:3,title:"单精度浮点型",slug:"单精度浮点型",children:[]},{level:3,title:"双精度浮点型",slug:"双精度浮点型",children:[]},{level:3,title:"无类型",slug:"无类型",children:[]},{level:3,title:"类型转换",slug:"类型转换",children:[]}]}],git:{},filePathRelative:"blogs/C++/C++语法基础.md"}},5119:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var e=a(6252);const t=(0,e.uE)('<p><strong>学习之路</strong><strong>从上而下的学习一下C</strong>++</p><h2 id="代码框架" tabindex="-1"><a class="header-anchor" href="#代码框架" aria-hidden="true">#</a> 代码框架</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something...</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>#include 是一个预处理命令，意思将一个文件引入此处，是头文件被引入。你需要确定要#include哪些文件，若引入了多余的文件，会增加编译时间，但几乎不会对运行时间影响</p></blockquote><h2 id="define-命令" tabindex="-1"><a class="header-anchor" href="#define-命令" aria-hidden="true">#</a> #define 命令</h2><p><code>#define</code>也是一个预处理命令，用于定义宏，本质上是文本替换。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">n</span> <span class="token expression"><span class="token number">233</span></span></span>\n<span class="token comment">// n 不是变量，而是编译器会将代码中所有 n 文本替换为 233，但是作为标识符一部分的</span>\n<span class="token comment">// n 的就不会被替换，如 fn 不会被替换成 f233，同样，字符串内的也不会被替换</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>  <span class="token comment">// 输出 233</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>在工程上使用<code>#define</code>尽量避免定义函数，一旦定义是作用全局，容易引发许多问题</p></blockquote><h2 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出" aria-hidden="true">#</a> 输入输出</h2><p>cin与cout</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>                          <span class="token comment">// 声明变量</span>\n  std<span class="token operator">::</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>                <span class="token comment">// 读入 x 和 y</span>\n  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>  <span class="token comment">// 输出 y，换行，再输出 x</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">// 结束主函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>scanf与printf</p><p>这两个都是C语言提供的函数，大多数情况下，它们的速度比cin与cout更快，并且更方便控制输入输出格式。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>\n  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 读入 x 和 y</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n%d&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 y，换行，再输出 x</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><ol><li><code>%s</code> 表示字符串。</li><li><code>%c</code> 表示字符。</li><li><code>%lf</code> 表示双精度浮点数 (<code>double</code>)。</li><li><code>%lld</code> 表示长整型 (<code>long long</code>)。根据系统不同，也可能是 <code>%I64d</code>。</li><li><code>%u</code> 表示无符号整型 (<code>unsigned int</code>)。</li><li><code>%llu</code> 表示无符号长整型 (<code>unsigned long long</code>)，也可能是 <code>%I64u</code>。</li></ol></blockquote><p><strong>掌握了整体框架，预处理命令，输入输出，自然到了中间层的学习。</strong></p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>数据类型（内置了六种数据类型）</p><table><thead><tr><th style="text-align:left;">类型</th><th>关键字</th></tr></thead><tbody><tr><td style="text-align:left;">布尔型</td><td>bool</td></tr><tr><td style="text-align:left;">字符型</td><td>char</td></tr><tr><td style="text-align:left;">整型</td><td>int</td></tr><tr><td style="text-align:left;">浮点型</td><td>float</td></tr><tr><td style="text-align:left;">双浮点型</td><td>double</td></tr><tr><td style="text-align:left;">无类型</td><td>void</td></tr></tbody></table><h3 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> <strong>布尔类型</strong></h3><p>一个 <code>bool</code> 类型的变量取值只可能为两种：<code>true</code> 和 <code>false</code>。</p><p>一般情况下，一个 <code>bool</code> 类型变量占有 1字节（一般情况下， 字节 = 8位）的空间。</p><h3 id="字符型" tabindex="-1"><a class="header-anchor" href="#字符型" aria-hidden="true">#</a> <strong>字符型</strong></h3>',23),p=(0,e._)("code",null,"char",-1),o=(0,e.Uk)(" 类型的变量用于存放字符（实际上存储的仍然是整数，一般通过 "),c={href:"http://www.asciitable.com/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("ASCII 编码"),r=(0,e.Uk)(" 实现字符与整数的一一对应）。"),i=(0,e._)("code",null,"char",-1),d=(0,e.Uk)(" 的位数一般为8 位。"),u=(0,e.uE)('<p>一般情况下，<code>char</code> 的表示范围在-128~127 之间。</p><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> <strong>整型</strong></h3><p>C++中，<code>int</code>至少为2字节，也就是16位</p><blockquote><p><code>int</code>可以使用如下修饰关键字</p></blockquote><p>符号性：</p><ul><li><code>signed</code>：表示带符号整数（默认）；</li><li><code>unsigned</code>：表示无符号整数。</li></ul><p>大小：</p><ul><li><code>short</code>：表示 <strong>至少</strong>16 位整数；</li><li><code>long</code>：表示 <strong>至少</strong> 32位整数；</li><li><code>long long</code>：表示 <strong>至少</strong> 64位整数。</li></ul><blockquote><p>注意，加了修饰词，长度随之有变化。</p></blockquote><h3 id="单精度浮点型" tabindex="-1"><a class="header-anchor" href="#单精度浮点型" aria-hidden="true">#</a> <strong>单精度浮点型</strong></h3><p><code>float</code> 类型为单精度浮点类型。一般为 32位。</p><p>因为 <code>float</code> 类型表示范围较小，且精度不高，实际应用中常使用 <code>double</code> 类型（双精度浮点型）表示浮点数。</p><h3 id="双精度浮点型" tabindex="-1"><a class="header-anchor" href="#双精度浮点型" aria-hidden="true">#</a> 双精度浮点型</h3><p><code>double</code> 类型为双精度浮点型。一般为 64位。</p><h3 id="无类型" tabindex="-1"><a class="header-anchor" href="#无类型" aria-hidden="true">#</a> 无类型</h3><p><code>void</code> 类型为无类型，与上面几种类型不同的是，不能将一个变量声明为 <code>void</code> 类型。但是函数的返回值允许为 <code>void</code> 类型，表示该函数无返回值。</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>比较复杂，仅介绍两个（<strong>数值提升、数值转换</strong>）</p><h4 id="数值提升" tabindex="-1"><a class="header-anchor" href="#数值提升" aria-hidden="true">#</a> 数值提升</h4><p>数值提升，值本身不变</p><h4 id="数值转换" tabindex="-1"><a class="header-anchor" href="#数值转换" aria-hidden="true">#</a> 数值转换</h4><ul><li>浮点数转为整数，会舍去小数部分</li></ul><h4 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域" aria-hidden="true">#</a> 变量作用域</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">// 定义全局变量</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">// 定义局部变量</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 g 10</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 定义后不允许被改变</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',26),k={},b=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,o,(0,e._)("a",c,[l,(0,e.Wm)(a)]),r,i,d]),u],64)}]])}}]);