"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[6859],{1315:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-d8264f08",path:"/blogs/notes/Docker%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86.html",title:"docker命令合集",lang:"en-US",frontmatter:{title:"docker命令合集",date:"2021/07/01",tags:["docker命令"],categories:["notes"]},excerpt:"<p>Docker以及Dockerfile命令合集-持续更新。</p>\n",headers:[{level:2,title:"Docker",slug:"docker",children:[]},{level:2,title:"如何优雅的退出容器但是不停止容器运行？",slug:"如何优雅的退出容器但是不停止容器运行",children:[]},{level:2,title:"Dockerfile",slug:"dockerfile",children:[]},{level:2,title:"Docker hub",slug:"docker-hub",children:[]}],git:{},filePathRelative:"blogs/notes/Docker命令合集.md"}},9842:(n,s,e)=>{e.r(s),e.d(s,{default:()=>p});const a=(0,e(6252).uE)('<p>Docker以及Dockerfile命令合集-持续更新。</p><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><p><strong>build镜像(有Dockerfile)</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> build -t myimage --network <span class="token function">host</span> <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>myimage是自定义镜像名，可自行更改, -t [命名]</p><p>公司配备一般还要加上 --network host才能访问请求网络</p></blockquote><p><strong>实例化一个容器</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> run -d --name bili --network <span class="token function">host</span> --restart unless-stopped -p <span class="token number">9090</span>:9090 -p <span class="token number">8022</span>:22 myimage\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>-d 在后台运行容器</p><p>-p [容器端口]:[宿主机端口], 可以指定多个端口（多个-p）</p><p>myimage 镜像名字</p><p>-it i是保持输入，t是将日志绑定伪终端输出</p><p>--restart unless-stopped 这个适用于自动重开容器</p></blockquote><p><strong>进入容器内部</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器id/容器名字 <span class="token function">bash</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="如何优雅的退出容器但是不停止容器运行" tabindex="-1"><a class="header-anchor" href="#如何优雅的退出容器但是不停止容器运行" aria-hidden="true">#</a> 如何优雅的退出容器但是不停止容器运行？</h2><p><code>ctrl</code>+<code>P</code>+<code>Q</code> <strong>切记，如果你有热键绑定，先取消</strong> 然后<code>docker ps</code>就能看到你的容器在运行</p><p><strong>查看镜像或者容器</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#镜像\ndocker images\n\n#容器(正在运行的)\ndocker ps\n\n#容器(所有)\ndocker ps -a\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>删除容器</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker stop 容器id &amp;&amp; docker rm 容器id\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>如果容器实例没有运行，执行后半句,容器id也可以是名字</p></blockquote><p><strong>删除镜像</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker rmi 镜像id/镜像名字\n#如果提示无法删除，有attach其他镜像，则执行下面语句\ndocker rmi -f 镜像id/镜像名字\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>先要暂停和删除该镜像下的所有容器才能删除镜像</p></blockquote><p><strong>查看容器运行失败日志</strong></p><p>很多人运行容器几秒内就自动退出，也不知道哪里查看日志信息</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 获取日志地址\ndocker inspect --format &#39;{{.LogPath}}&#39; 容器id\n# 这时会打印一串地址，复制\n# 通过cat命令查看日志\ncat 刚刚复制的地址\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>查看容器运行时日志</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 适用日志不多，因为是把全部日志输出(打印实时log)\ndocker logs -f 容器名字\n\n# 输出最近10条日志\ndocker logs --tail 10 容器名字\n\n# 筛选log(查找“error”)\ndocker logs | grep error\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>如果进入了虚拟终端<code>-it</code>，使用<code>ctrl</code>+<code>P</code> <code>Q</code>(一起按) 达成退出但不停止容器运行</strong></p><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h2><p><strong>Dockerfile：一个文件命名为Dockerfile，无后缀</strong></p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> python</span>\n<span class="token comment"># FROM 指定基础镜像</span>\n\n<span class="token instruction"><span class="token keyword">COPY</span> ./app /app</span>\n<span class="token comment"># COPY [文件1/文件夹1] [路径]</span>\n<span class="token comment"># 意思将宿主机的[文件1/文件夹1]复制到镜像的新一层内的目标路径</span>\n\n<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>\n<span class="token comment"># 指定工作目录</span>\n\n<span class="token instruction"><span class="token keyword">RUN</span> apt-get update -y &amp;&amp; <span class="token operator">\\</span>\n\tapt-get install -y vim &amp;&amp; <span class="token operator">\\</span>\n\tpip3 install -r requirements.txt</span>\n<span class="token comment"># RUN 执行命令，务必命令使用&amp;&amp;连起来(\\：意思换行)</span>\n\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python3&quot;</span>,<span class="token string">&quot;main.py&quot;</span>]</span>\n<span class="token comment"># CMD 容器启动时执行的命令</span>\n\n<span class="token instruction"><span class="token keyword">EXPOSE</span> 9090</span>\n<span class="token comment"># 声明暴露指定端口，并不是真的暴露，帮助理解</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="docker-hub" tabindex="-1"><a class="header-anchor" href="#docker-hub" aria-hidden="true">#</a> Docker hub</h2><p>现有一个<code>docker hub</code>账号和新建一个公开仓库</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1</span>\n<span class="token function">docker</span> tag 要推送的镜像名字:tag 目标仓库名字/用户名:tag\n\n<span class="token comment"># 2 </span>\n<span class="token function">docker</span> login\n\n<span class="token comment"># 3 </span>\n<span class="token function">docker</span> push 目标仓库名字/用户名:tag\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',32),r={},p=(0,e(3744).Z)(r,[["render",function(n,s){return a}]])}}]);