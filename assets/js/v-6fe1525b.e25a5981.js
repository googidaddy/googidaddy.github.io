"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[3491],{4556:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6fe1525b",path:"/blogs/MongoDB/MongoDB.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"MongoDB",slug:"mongodb",children:[]}],git:{},filePathRelative:"blogs/MongoDB/MongoDB.md"}},9865:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h2><ul><li>文档数据库</li><li>NoSQL</li></ul><p><strong>上Atlas，注册一个号</strong></p><p><strong>创建数据库及管理账号和IP通行(允许所有)</strong></p><p><strong>新建一个js文件</strong></p><p><strong>Mongoose 可以被描述为<em>object document mapper</em> (ODM) ，并且将 JavaScript 对象保存为 Mongo 文档对于Mongoose库来说很简单。</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/*\n\tnode.js\n\t需要npm install mongoose\n\tMongoose 可以被描述为object document mapper (ODM) ，并且将 JavaScript 对象保存为 Mongo 文档对于Mongoose库来说很简单。\n*/</span>\n<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 替换</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mongodb+srv://数据库管理账号:数据库管理密码@cluster0-ostce.mongodb.net/起一个集合名字?retryWrites=true</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token keyword">const</span> noteSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n  <span class="token literal-property property">date</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Note <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Note&#39;</span><span class="token punctuation">,</span> noteSchema<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> note <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Note</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;HTML is Easy&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nnote<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;note saved!&#39;</span><span class="token punctuation">)</span>\n  mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// node 这个文件.js</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* \n\tfindById\n\tfindByIdAndUpdate\n\tFindByIdAndRemove\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>错误处理等移入中间件（错误处理排最后）</strong></p><p><strong>文档型数据库不能很好的支持collection之间的join queries，Mongoose的join通过populate方法完成。</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// sample</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>\nresponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',11),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);