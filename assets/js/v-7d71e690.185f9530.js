"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5574],{5328:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7d71e690",path:"/blogs/React/React-%E4%B9%A0%E6%83%AF.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"React函数式编程",slug:"react函数式编程",children:[]}],git:{},filePathRelative:"blogs/React/React-习惯.md"}},5358:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h3 id="react函数式编程" tabindex="-1"><a class="header-anchor" href="#react函数式编程" aria-hidden="true">#</a> React函数式编程</h3><p>函数编程范型的一个特点，就是使用不可变的数据结构。</p><p><strong>比如数组中，经常使用<code>push</code>添加新元素到数组中，但在React中，最好使用<code>concat</code>方法，不添加元素，而是创建一个新数组</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> t2 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>  <span class="token comment">// [1, -1, 3] is printed</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token comment">// [1, -1, 3, 5] is printed</span>\n\n<span class="token comment">// 不光如此，数组还有许多有用的方法，比如map方法</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// map返回一个新数组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>   <span class="token comment">// [2, 4, 6] is printed</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&lt;li&gt;&#39;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&#39;&lt;/li&gt;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>  \n<span class="token comment">// [ &#39;&lt;li&gt;1&lt;/li&gt;&#39;, &#39;&lt;li&gt;2&lt;/li&gt;&#39;, &#39;&lt;li&gt;3&lt;/li&gt;&#39; ] is printed</span>\n\n<span class="token comment">// 亦或者解构赋值</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> t\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span>  <span class="token comment">// 1, 2 is printed</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>          <span class="token comment">// [3, 4 ,5] is printed rest:es6新特性</span>\n\n<span class="token comment">// 解构赋值再深挖一点.</span>\nprops <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span> <span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">,</span>age <span class="token punctuation">}</span> <span class="token operator">=</span> props\n    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age\n<span class="token punctuation">}</span>\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// 如果props具有值,这种写法更好一点</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">bornYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> age\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p><strong>React中状态不可直接修改原则</strong></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 例如在复杂的状态中，点击事件有两个值，单独触发的场景\nconst App = () =&gt; {\n    const [left,setLeft] = useState(0);\n    const [right,setRight] = useState(0);\n}\n// 上面是不太好的写法\n// 正确思路应该是这样，统一丢给useState状态管理\nconst App = () =&gt; {\n    const [click,setClick] = useState({\n        left : 0,\n        right : 0\n    });\n}\n// 展开语法优雅的使用\nconst handleLeftClick = () =&gt; setClick({...click,left:click.left+1})\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',6),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);