"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[9485],{5196:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5eb42d98",path:"/blogs/C++/Tree.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Tree",slug:"tree",children:[]},{level:2,title:"Binary Tree Preorder Traversal",slug:"binary-tree-preorder-traversal",children:[]},{level:2,title:"Binary Tree Inorder Traversal",slug:"binary-tree-inorder-traversal",children:[]},{level:2,title:"Binary Tree Postorder Traversal",slug:"binary-tree-postorder-traversal",children:[]},{level:2,title:"Binary Tree Level Order Traversal",slug:"binary-tree-level-order-traversal",children:[]},{level:2,title:"Find Max Depth",slug:"find-max-depth",children:[]},{level:2,title:"Conclusion",slug:"conclusion",children:[]},{level:2,title:"Symmetric Tree",slug:"symmetric-tree",children:[]},{level:2,title:"Path Sum",slug:"path-sum",children:[]},{level:2,title:"Construct Binary Tree from Inorder and Postorder Traversal",slug:"construct-binary-tree-from-inorder-and-postorder-traversal",children:[]},{level:2,title:"Construct Binary Tree from Preorder and Inorder Traversal",slug:"construct-binary-tree-from-preorder-and-inorder-traversal",children:[]},{level:2,title:"Populating Next Right Pointers in Each Node",slug:"populating-next-right-pointers-in-each-node",children:[]},{level:2,title:"Lowest Common Ancestor of a Binary Tree",slug:"lowest-common-ancestor-of-a-binary-tree",children:[]},{level:2,title:"Serialize and Deserialize Binary Tree",slug:"serialize-and-deserialize-binary-tree",children:[]},{level:2,title:"Balanced Binary Tree",slug:"balanced-binary-tree",children:[{level:3,title:"Solution",slug:"solution",children:[]}]},{level:2,title:"Convert Sorted Array to Binary Search Tree",slug:"convert-sorted-array-to-binary-search-tree",children:[{level:3,title:"Solution",slug:"solution-1",children:[]}]}],git:{},filePathRelative:"blogs/C++/Tree.md"}},8786:(n,s,a)=>{a.r(s),a.d(s,{default:()=>O});var p=a(6252);const e=(0,p.uE)('<h2 id="tree" tabindex="-1"><a class="header-anchor" href="#tree" aria-hidden="true">#</a> Tree</h2><p>The goal of this chapter is to:</p><ol><li>Understand the difference between different tree traversal methods;</li><li>Be able to solve preorder, inorder and postorder traversal <code>recursively</code>;</li><li>Be able to solve preorder, inorder and postorder traversal <code>iteratively</code>;</li><li>Be able to do <code>level traversal</code> using <code>BFS</code>.</li></ol><p>we will focus on the traversal methods used in a binary tree. Understanding these traversal methods will definitely help you have a better understanding of the tree structure and have a solid foundation for the further study.</p><h2 id="binary-tree-preorder-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-preorder-traversal" aria-hidden="true">#</a> Binary Tree Preorder Traversal</h2><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="asd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,null,2,3]\nOutput: [1,2,3]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,null,2,3]\nOutput: [1,2,3]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = []\nOutput: []\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1]\nOutput: [1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2]\nOutput: [1,2]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg" alt="tree3"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,null,2]\nOutput: [1,2]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution-Using Recursive</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>\n       <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><strong>Solution-Using Iterative</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution<span class="token punctuation">{</span>\n  public<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n       <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\tvector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>\n\tstack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>\n\tst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// remove and print current node from stack </span>\n\t\tTreeNode<span class="token operator">*</span> curr <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tst<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token comment">// preorder: root-&gt;left-&gt;right</span>\n\t\t<span class="token comment">// Trick - add Right child before the Left Child so that left child will be removed first</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> \n\t\t\tst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>\n\t\t\tst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="binary-tree-inorder-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-inorder-traversal" aria-hidden="true">#</a> Binary Tree Inorder Traversal</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="binary-tree-postorder-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-postorder-traversal" aria-hidden="true">#</a> Binary Tree Postorder Traversal</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>\n        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="binary-tree-level-order-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-level-order-traversal" aria-hidden="true">#</a> Binary Tree Level Order Traversal</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1]\nOutput: [[1]]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution-Using Queue</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n \t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> \n            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        \n        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span>\n        \n        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>\n        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> tmp<span class="token punctuation">;</span>\n            \n            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                TreeNode<span class="token operator">*</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                \n                tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                \n                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                \n                n<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="find-max-depth" tabindex="-1"><a class="header-anchor" href="#find-max-depth" aria-hidden="true">#</a> Find Max Depth</h2><p><strong>TOP-down</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. return specific value for null node\n2. update the answer if needed                      // answer &lt;-- params\n3. left_ans = top_down(root.left, left_params)      // left_params &lt;-- root.val, params\n4. right_ans = top_down(root.right, right_params)   // right_params &lt;-- root.val, params\n5. return the answer if needed                      // answer &lt;-- left_ans, right_ans\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> answer<span class="token punctuation">;</span> <span class="token comment">// don&#39;t forget to initialize answer before call maximum_depth</span>\n<span class="token keyword">void</span> <span class="token function">maximum_depth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        answer <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>answer<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">maximum_depth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">maximum_depth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>Bottom-up</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. return specific value for null node\n2. left_ans = bottom_up(root.left)      // call function recursively for left child\n3. right_ans = bottom_up(root.right)    // call function recursively for right child\n4. return answers                       // answer &lt;-- left_ans, right_ans, root.val\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">maximum_depth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">// return 0 for null node</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">int</span> left_depth <span class="token operator">=</span> <span class="token function">maximum_depth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> right_depth <span class="token operator">=</span> <span class="token function">maximum_depth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>left_depth<span class="token punctuation">,</span> right_depth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// return depth of the subtree rooted at root</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p><strong>When you meet a tree problem, ask yourself two questions: Can you determine some parameters to help the node know its answer? Can you use these parameters and the value of the node itself to determine what should be the parameters passed to its children? If the answers are both yes, try to solve this problem using a &quot;<code>top-down</code>&quot; recursive solution.</strong></p><p><strong>Or, you can think of the problem in this way: for a node in a tree, if you know the answer of its children, can you calculate the answer of that node? If the answer is yes, solving the problem recursively using a <code>bottom up</code> approach might be a good idea.</strong></p><p><strong>In the following sections, we provide several classic problems for you to help you understand tree structure and recursion better.</strong></p><h2 id="symmetric-tree" tabindex="-1"><a class="header-anchor" href="#symmetric-tree" aria-hidden="true">#</a> Symmetric Tree</h2><p><strong>&quot;Simple&quot; Problems</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="s2"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,2,3,4,4,3]\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" alt="s3"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,2,null,3,null,3]\nOutput: false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution-Recuisive</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scan left and right</span>\n    <span class="token punctuation">}</span>\n    bool <span class="token function">isMirror</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span>TreeNode <span class="token operator">*</span>root2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n        <span class="token comment">// </span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">&amp;&amp;</span> root2 <span class="token operator">&amp;&amp;</span> root1<span class="token operator">-&gt;</span>val <span class="token operator">==</span> root2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>\n            <span class="token comment">// specially from the left to the right &amp; right to the left</span>\n            <span class="token keyword">return</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>root2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>root2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>Solution-Iterative</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n        bool symmetric <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        TreeNode <span class="token operator">*</span>temp1<span class="token punctuation">,</span> <span class="token operator">*</span>temp2<span class="token punctuation">;</span>\n        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> q1<span class="token punctuation">,</span> q2<span class="token punctuation">;</span>\n        q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Transverse level From left to right</span>\n        q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Tranverse Level From Right to Left</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> symmetric<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            temp1<span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            temp2 <span class="token operator">=</span> q2<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            q2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1 <span class="token operator">&amp;&amp;</span> temp2<span class="token punctuation">)</span>\n                symmetric <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>val <span class="token operator">==</span> temp2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>\n            <span class="token keyword">else</span>\n                symmetric <span class="token operator">=</span> temp1 <span class="token operator">==</span> temp2<span class="token punctuation">;</span>\n                \n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span> q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span> q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>temp2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span> q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>temp2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span> q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            \n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">return</span> <span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> symmetric<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="path-sum" tabindex="-1"><a class="header-anchor" href="#path-sum" aria-hidden="true">#</a> Path Sum</h2><p><strong>Similar to &quot;Symmetric Tree&quot;</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" alt="asd" style="zoom:80%;"><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" alt="asdasd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,3], targetSum = 5\nOutput: false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2], targetSum = 0\nOutput: false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution - Recursion</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n        sum<span class="token operator">=</span>sum<span class="token operator">-</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>\n        \n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n           <span class="token keyword">return</span> sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>       \n        <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span>\n        \n    \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="construct-binary-tree-from-inorder-and-postorder-traversal" tabindex="-1"><a class="header-anchor" href="#construct-binary-tree-from-inorder-and-postorder-traversal" aria-hidden="true">#</a> Construct Binary Tree from Inorder and Postorder Traversal</h2><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="sadasd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: inorder = [-1], postorder = [-1]\nOutput: [-1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution-Recursion</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">int</span> n <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    TreeNode<span class="token operator">*</span> <span class="token function">helper</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> is<span class="token punctuation">,</span> <span class="token keyword">int</span> ie<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> pe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>ie<span class="token operator">&lt;</span>is <span class="token operator">||</span> pe<span class="token operator">&lt;</span>ps<span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>\n        TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>pe<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token keyword">int</span> indexOfHead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> i<span class="token punctuation">[</span>indexOfHead<span class="token punctuation">]</span><span class="token punctuation">)</span> \n            <span class="token operator">++</span>indexOfHead<span class="token punctuation">;</span>\n        \n        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> is<span class="token punctuation">,</span> indexOfHead<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> indexOfHead<span class="token operator">+</span>ps<span class="token operator">-</span>is<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> indexOfHead<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ie<span class="token punctuation">,</span> p<span class="token punctuation">,</span> indexOfHead<span class="token operator">+</span>ps<span class="token operator">-</span>is<span class="token punctuation">,</span> pe<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="construct-binary-tree-from-preorder-and-inorder-traversal" tabindex="-1"><a class="header-anchor" href="#construct-binary-tree-from-preorder-and-inorder-traversal" aria-hidden="true">#</a> Construct Binary Tree from Preorder and Inorder Traversal</h2><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="asdzxcsc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution - Recursion</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Preorder Traversal = [root,left-subtree,right-subtree]\nInorder Traversal = [left-subtree,root,right-subtree]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>we only need to find the root index in <code>Inorder</code>,and left side of the root is left-subtree, the right side is right-subtree.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> curIdx<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inBeginIdx<span class="token punctuation">,</span> <span class="token keyword">int</span> inEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>curIdx <span class="token operator">&gt;=</span> preorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> inBeginIdx <span class="token operator">&gt;</span> inEndIdx<span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>\n\t\tTreeNode<span class="token operator">*</span> node <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">// find the index of current node in preorder</span>\n\t\t<span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> inBeginIdx<span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> inEndIdx<span class="token punctuation">,</span> preorder<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> inIdx <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token comment">// calculate the number of nodes in left subtree so that we can know where the right leaf begins</span>\n\t\t<span class="token keyword">int</span> numOfLeft <span class="token operator">=</span> inIdx <span class="token operator">-</span> inBeginIdx<span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token comment">// assume that curIdx + 1 would be the left node</span>\n\t\tnode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> curIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inBeginIdx<span class="token punctuation">,</span> inIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tnode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> curIdx <span class="token operator">+</span> numOfLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> node<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><strong>Solution - Using map</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n\t<span class="token comment">// consider that we need to iterate all nodes in the left subtree before building the right one,</span>\n\t<span class="token comment">// so we can use a simple index to iterate the elements in preorder</span>\n    <span class="token keyword">int</span> preIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> inorderMap<span class="token punctuation">;</span>\n    \n    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n\t\t\tinorderMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> <span class="token function">buildTreeWithMap</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    TreeNode<span class="token operator">*</span> <span class="token function">buildTreeWithMap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span>     <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>\n\t\tTreeNode<span class="token operator">*</span> node <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preIdx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">int</span> inIdx <span class="token operator">=</span> inorderMap<span class="token punctuation">[</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\tnode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">buildTreeWithMap</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> start<span class="token punctuation">,</span> inIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tnode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">buildTreeWithMap</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> node<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="populating-next-right-pointers-in-each-node" tabindex="-1"><a class="header-anchor" href="#populating-next-right-pointers-in-each-node" aria-hidden="true">#</a> Populating Next Right Pointers in Each Node</h2><p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt="asdazc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Solution</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/</span>\n\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    Node<span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> n <span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                Node<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                \n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="lowest-common-ancestor-of-a-binary-tree" tabindex="-1"><a class="header-anchor" href="#lowest-common-ancestor-of-a-binary-tree" aria-hidden="true">#</a> Lowest Common Ancestor of a Binary Tree</h2><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>',79),t=(0,p.Uk)("According to the "),o={href:"https://en.wikipedia.org/wiki/Lowest_common_ancestor",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("definition of LCA on Wikipedia"),r=(0,p.Uk)(": “The lowest common ancestor is defined between two nodes "),c=(0,p._)("code",null,"p",-1),u=(0,p.Uk)(" and "),i=(0,p._)("code",null,"q",-1),k=(0,p.Uk)(" as the lowest node in "),b=(0,p._)("code",null,"T",-1),d=(0,p.Uk)(" that has both "),m=(0,p._)("code",null,"p",-1),g=(0,p.Uk)(" and "),f=(0,p._)("code",null,"q",-1),h=(0,p.Uk)(" as descendants (where we allow "),v=(0,p._)("strong",null,"a node to be a descendant of itself",-1),y=(0,p.Uk)(").”"),x=(0,p.uE)('<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="asczxcas"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="azxkcnsaolfd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2], p = 1, q = 2\nOutput: 1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution-Recursive</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n\n    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token operator">==</span>p<span class="token operator">-&gt;</span>val <span class="token operator">||</span> root<span class="token operator">-&gt;</span>val<span class="token operator">==</span>q<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n         TreeNode<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token keyword">if</span><span class="token punctuation">(</span>left and right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n         <span class="token keyword">return</span> left <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="serialize-and-deserialize-binary-tree" tabindex="-1"><a class="header-anchor" href="#serialize-and-deserialize-binary-tree" aria-hidden="true">#</a> Serialize and Deserialize Binary Tree</h2><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>',10),w=(0,p._)("strong",null,"Clarification:",-1),T=(0,p.Uk)(" The input/output format is the same as "),N={href:"https://leetcode.com/faq/#binary-tree",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("how LeetCode serializes a binary tree"),_=(0,p.Uk)(". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."),I=(0,p.uE)('<p><img src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg" alt="zxczxc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = []\nOutput: []\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1]\nOutput: [1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2]\nOutput: [1,2]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Solution</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */</span>\nclass Codec <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n\n       string <span class="token function">serialize</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">;</span> \n        string serial <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        serial <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token operator">+</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> serial<span class="token punctuation">;</span>          \n    <span class="token punctuation">}</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">helper</span><span class="token punctuation">(</span>string data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        string r <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> \n        <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span>r<span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">;</span> \n        i<span class="token operator">++</span><span class="token punctuation">;</span> \n        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span><span class="token string">&quot;#&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n            root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> \n            root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> \n            <span class="token keyword">return</span> root<span class="token punctuation">;</span> \n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    \n    TreeNode<span class="token operator">*</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>string data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Your Codec object will be instantiated and called as such:</span>\n<span class="token comment">// Codec ser, deser;</span>\n<span class="token comment">// TreeNode* ans = deser.deserialize(ser.serialize(root));</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="balanced-binary-tree" tabindex="-1"><a class="header-anchor" href="#balanced-binary-tree" aria-hidden="true">#</a> Balanced Binary Tree</h2><blockquote><p>a binary tree in which the left and right subtrees of <em>every</em> node differ in height by no more than 1.</p></blockquote><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" alt="asd"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [3,9,20,null,null,15,7]\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg" alt="askld"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: root = []\nOutput: true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    bool <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        <span class="token function">isOne</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">int</span> <span class="token function">isOne</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span>bool<span class="token operator">&amp;</span> flag<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">isOne</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">isOne</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token operator">=</span>false<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="convert-sorted-array-to-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#convert-sorted-array-to-binary-search-tree" aria-hidden="true">#</a> Convert Sorted Array to Binary Search Tree</h2><p><img src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg" alt="asda"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg" alt="aslkd"></p><p><img src="https://assets.leetcode.com/uploads/2021/02/18/btree.jpg" alt="zlxkc"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,3] and [3,1] are both a height-balanced BSTs.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1" aria-hidden="true">#</a> <strong>Solution</strong></h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">solution</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    TreeNode<span class="token operator">*</span> <span class="token function">solution</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>\n        TreeNode<span class="token operator">*</span> t <span class="token operator">=</span> new <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t<span class="token operator">-&gt;</span>left<span class="token operator">=</span><span class="token function">solution</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token function">solution</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> t<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',24),L={},O=(0,a(3744).Z)(L,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[l,(0,p.Wm)(a)]),r,c,u,i,k,b,d,m,g,f,h,v,y]),x,(0,p._)("p",null,[w,T,(0,p._)("a",N,[q,(0,p.Wm)(a)]),_]),I],64)}]])}}]);