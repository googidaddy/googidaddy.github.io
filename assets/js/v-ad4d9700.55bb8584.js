"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[6318],{6186:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ad4d9700",path:"/blogs/Golang/Go%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E3%80%81%E7%BB%93%E6%9E%84%E3%80%81%E5%88%87%E7%89%87%E5%92%8C%E6%98%A0%E5%B0%84.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Go中使用数组、结构、切片和映射",slug:"go中使用数组、结构、切片和映射",children:[]},{level:2,title:"数组",slug:"数组",children:[{level:3,title:"声明数组",slug:"声明数组",children:[]},{level:3,title:"二维数组",slug:"二维数组",children:[]}]},{level:2,title:"切片",slug:"切片",children:[]},{level:2,title:"映射",slug:"映射",children:[{level:3,title:"声明并初始化映射",slug:"声明并初始化映射",children:[]},{level:3,title:"删除",slug:"删除",children:[]},{level:3,title:"映射中循环",slug:"映射中循环",children:[]}]},{level:2,title:"结构",slug:"结构",children:[{level:3,title:"声明并初始化结构",slug:"声明并初始化结构",children:[]},{level:3,title:"结构嵌入",slug:"结构嵌入",children:[]},{level:3,title:"JSON编码和解码",slug:"json编码和解码",children:[]}]}],git:{},filePathRelative:"blogs/Golang/Go中使用数组、结构、切片和映射.md"}},70:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="go中使用数组、结构、切片和映射" tabindex="-1"><a class="header-anchor" href="#go中使用数组、结构、切片和映射" aria-hidden="true">#</a> Go中使用数组、结构、切片和映射</h2><ul><li>Go 中的聚合类型：数组和切片。</li><li>数组和切片之间的区别。</li><li>用于操作数据的内置函数。</li><li>如何通过映射使用键值数据结构。</li><li>如何使用结构编写复杂的自定义数据类型。</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p><strong>Go 中的数组是一种特定类型且长度固定的数据结构。 它们可具有零个或多个元素，你必须在声明或初始化它们时定义大小。 此外，它们一旦创建，就无法调整大小。 鉴于这些原因，数组在 Go 程序中并不常用，但它们是切片和映射的基础。</strong></p><h3 id="声明数组" tabindex="-1"><a class="header-anchor" href="#声明数组" aria-hidden="true">#</a> <strong>声明数组</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>\n    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    cities <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Madrid&quot;</span><span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Cities:&quot;</span><span class="token punctuation">,</span> cities<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 0</span>\n<span class="token comment">// 10</span>\n<span class="token comment">// 0</span>\n<span class="token comment">// Cities: [New York Paris Berlin Madrid ] 注意哦，这里有一个空字符串</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>花式声明数组</strong></p><p>可以用<code>(...)</code>代替位置,初始化值也可以指定位置赋值</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cities <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Madrid&quot;</span><span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Cities:&quot;</span><span class="token punctuation">,</span> cities<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Cities: [New York Paris Berlin Madrid] 这里没有空字符串</span>\n<span class="token comment">// 这里把99的位置赋值-1</span>\n numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组" aria-hidden="true">#</a> <strong>二维数组</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> twoD <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>\n            twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Row&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nAll at once:&quot;</span><span class="token punctuation">,</span> twoD<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Row 0 [1 2 3 4 5]\nRow 1 [2 4 6 8 10]\nRow 2 [3 6 9 12 15]\n\nAll at once: [[1 2 3 4 5] [2 4 6 8 10] [3 6 9 12 15]]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><p>切片也是 Go 中的一种数据类型，它表示一系列类型相同的元素。 不过，与数组更重要的区别是切片的大小是动态的，不是固定的。</p><p>切片只有 3 个组件：</p><ul><li><strong>指针</strong>，指向基础数组可访问的第一个元素（并非一定是数组的第一个元素）。</li><li><strong>长度</strong>，指示切片中的元素数目。</li><li><strong>容量</strong>，显示切片开头与基础数组结束之间的元素数目。</li></ul><p><img src="https://docs.microsoft.com/zh-cn/learn/language/go-data-types/media/go-slices.png" alt=""></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    months <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;January&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;February&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;March&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;April&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;May&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;June&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;July&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;August&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;September&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;October&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;November&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;December&quot;</span><span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Length:&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Capacity:&quot;</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[January February March April May June July August September October November December]\nLength: 12\nCapacity: 12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>切片项</strong></p><p>Go 支持切片运算符 <code>s[i:j]</code>，其中：</p><ul><li><code>s</code> 表示数组。</li><li><code>i</code> 表示指向它将使用的数组（或另一切片）的第一个元素的指针。</li><li><code>j</code> 表示切片将使用的最后一个元素的位置。</li></ul><p><img src="https://docs.microsoft.com/zh-cn/learn/language/go-data-types/media/go-slices-multiple.png" alt=""></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    months <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;January&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;February&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;March&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;April&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;May&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;June&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;July&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;August&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;September&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;October&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;November&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;December&quot;</span><span class="token punctuation">}</span>\n    quarter1 <span class="token operator">:=</span> months<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>\n    quarter2 <span class="token operator">:=</span> months<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>\n    quarter3 <span class="token operator">:=</span> months<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>\n    quarter4 <span class="token operator">:=</span> months<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quarter1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>quarter1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>quarter1<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quarter2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>quarter2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>quarter2<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quarter3<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>quarter3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>quarter3<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quarter4<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>quarter4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>quarter4<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[January February March] 3 12\n[April May June] 3 9\n[July August September] 3 6\n[October November December] 3 3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>请注意，切片的长度不变，但容量不同。 我们来了解 <code>quarter2</code> 切片。 声明此切片时，你指出希望切片从位置编号 3 开始，最后一个元素位于位置编号 6。 切片长度为 3 个元素，但容量为 9，原因是基础数组有更多元素或位置可供使用，但对切片而言不可见。 例如，如果你尝试打印出类似 <code>fmt.Println(quarter2[3])</code> 的内容，会出现以下错误：<code>panic: runtime error: index out of range [3] with length 3</code>。</p><p><strong>追加项</strong></p><p>Go 提供了内置函数 <code>append(slice, element)</code>，便于你向切片添加元素。 你需要将要修改的切片和要追加的元素作为值发送给该函数。 然后，<code>append</code> 函数会返回一个新的切片，你需要将其存储在变量中。 对于要更改的切片，变量可能相同。</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> numbers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\tcap=%d\\t%v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0       cap=1   [0]\n1       cap=2   [0 1]\n2       cap=4   [0 1 2]\n3       cap=4   [0 1 2 3]\n4       cap=8   [0 1 2 3 4]\n5       cap=8   [0 1 2 3 4 5]\n6       cap=8   [0 1 2 3 4 5 6]\n7       cap=8   [0 1 2 3 4 5 6 7]\n8       cap=16  [0 1 2 3 4 5 6 7 8]\n9       cap=16  [0 1 2 3 4 5 6 7 8 9]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>删除项</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    letters <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">}</span>\n    remove <span class="token operator">:=</span> <span class="token number">2</span>\n\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Before&quot;</span><span class="token punctuation">,</span> letters<span class="token punctuation">)</span>\n\n    letters<span class="token punctuation">[</span>remove<span class="token punctuation">]</span> <span class="token operator">=</span> letters<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n    letters <span class="token operator">=</span> letters<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;After&quot;</span><span class="token punctuation">,</span> letters<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Before [A B C D E]\nAfter [A B E D]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="映射" tabindex="-1"><a class="header-anchor" href="#映射" aria-hidden="true">#</a> 映射</h2><p>Go 中的映射是一个哈希表，是键值对的集合</p><h3 id="声明并初始化映射" tabindex="-1"><a class="header-anchor" href="#声明并初始化映射" aria-hidden="true">#</a> <strong>声明并初始化映射</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentsAge <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>\n        <span class="token string">&quot;john&quot;</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;bob&quot;</span><span class="token punctuation">:</span>  <span class="token number">31</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>studentsAge<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// map[bob:31 john:32]</span>\n<span class="token comment">// 如果不想立即初始化呢？</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n<span class="token comment">// 如果映射中没有要的值会报错嘛？</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentsAge <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">31</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>studentsAge<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 不会报错，而是返回0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentsAge <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">31</span>\n\t<span class="token comment">// 第一个是项的值。 第二个是指示键是否存在的布尔型标志</span>\n    <span class="token comment">// 这样就避免了不存在而且还不报错的情况</span>\n    age<span class="token punctuation">,</span> exist <span class="token operator">:=</span> studentsAge<span class="token punctuation">[</span><span class="token string">&quot;christy&quot;</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> exist <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Christy&#39;s age is&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Christy&#39;s age couldn&#39;t be found&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> <strong>删除</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentsAge <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">31</span>\n    <span class="token comment">// 如果删除一个不存在的项会报错嘛？想想上面说的访问值</span>\n    <span class="token function">delete</span><span class="token punctuation">(</span>studentsAge<span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>studentsAge<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// map[bob:31]</span>\n<span class="token comment">// 答案是不会</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="映射中循环" tabindex="-1"><a class="header-anchor" href="#映射中循环" aria-hidden="true">#</a> <strong>映射中循环</strong></h3><p>老实说，<s>这完全就是python的for循环啦</s></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentsAge <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span>\n    studentsAge<span class="token punctuation">[</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">31</span>\n    <span class="token comment">// 假如我们只用到其中的一个值(age)，该怎么办？</span>\n    <span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token keyword">range</span> studentsAge <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\t%d\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// for age := range...</span>\n    <span class="token comment">// 当然可以使用_,age，_是一个很强的存在</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>Go 中的结构也是一种数据结构，它可包含零个或多个任意类型的字段，并将它们表示为单个实体。</p><h3 id="声明并初始化结构" tabindex="-1"><a class="header-anchor" href="#声明并初始化结构" aria-hidden="true">#</a> <strong>声明并初始化结构</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>\n    FirstName <span class="token builtin">string</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明新类型的一个变量</span>\n<span class="token keyword">var</span> john Employee\n<span class="token comment">// 请注意，必须为结构中的每个字段指定一个值。</span>\nemployee <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&#39;s Street&quot;</span><span class="token punctuation">}</span>\n<span class="token comment">// 访问某字段</span>\nemployee<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">1001</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span>\n<span class="token comment">// 指针访问</span>\n \temployee <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>LastName<span class="token punctuation">:</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span>\n    employeeCopy <span class="token operator">:=</span> <span class="token operator">&amp;</span>employee\n    employeeCopy<span class="token punctuation">.</span>FirstName <span class="token operator">=</span> <span class="token string">&quot;David&quot;</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span>\n<span class="token comment">// {0 John Doe }</span>\n<span class="token comment">// {0 David Doe }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="结构嵌入" tabindex="-1"><a class="header-anchor" href="#结构嵌入" aria-hidden="true">#</a> <strong>结构嵌入</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>\n    FirstName <span class="token builtin">string</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Information Person\n    ManagerID   <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> employee Employee\nemployee<span class="token punctuation">.</span>Information<span class="token punctuation">.</span>FirstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span>\n<span class="token comment">// 我想直接嵌入Person，并不想立即声明一个变量？</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>\n    FirstName <span class="token builtin">string</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Person\n    ManagerID <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Contractor <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Person\n    CompanyID <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    employee <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>\n        Person<span class="token punctuation">:</span> Person<span class="token punctuation">{</span>\n            FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    employee<span class="token punctuation">.</span>LastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>请注意如何在无需指定 <code>Person</code> 字段的情况下访问 <code>Employee</code> 结构中的 <code>FirstName</code> 字段，因为它会自动嵌入其所有字段。 但在你初始化结构时，必须明确要给哪个字段分配值。</p><h3 id="json编码和解码" tabindex="-1"><a class="header-anchor" href="#json编码和解码" aria-hidden="true">#</a> <strong>JSON编码和解码</strong></h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>    \n    <span class="token comment">// 在JSON中显示name而不是FirstName</span>\n    FirstName <span class="token builtin">string</span> <span class="token string">`json:&quot;name&quot;`</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span> <span class="token string">`json:&quot;address,omitempty&quot;`</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;encoding/json&quot;</span>\n    <span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>\n    FirstName <span class="token builtin">string</span> <span class="token string">`json:&quot;name&quot;`</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span> <span class="token string">`json:&quot;address,omitempty&quot;`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Person\n    ManagerID <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Contractor <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Person\n    CompanyID <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 有点小复杂，就是要不停写Employee{}</span>\n    employees <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Employee<span class="token punctuation">{</span>\n        Employee<span class="token punctuation">{</span>\n            Person<span class="token punctuation">:</span> Person<span class="token punctuation">{</span>\n                LastName<span class="token punctuation">:</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        Employee<span class="token punctuation">{</span>\n            Person<span class="token punctuation">:</span> Person<span class="token punctuation">{</span>\n                LastName<span class="token punctuation">:</span> <span class="token string">&quot;Campbell&quot;</span><span class="token punctuation">,</span> FirstName<span class="token punctuation">:</span> <span class="token string">&quot;David&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\n    data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n\n    <span class="token keyword">var</span> decoded <span class="token punctuation">[</span><span class="token punctuation">]</span>Employee\n    json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>decoded<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v&quot;</span><span class="token punctuation">,</span> decoded<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[{&quot;ID&quot;:0,&quot;name&quot;:&quot;John&quot;,&quot;LastName&quot;:&quot;Doe&quot;,&quot;ManagerID&quot;:0},{&quot;ID&quot;:0,&quot;name&quot;:&quot;David&quot;,&quot;LastName&quot;:&quot;Campbell&quot;,&quot;ManagerID&quot;:0}]\n[{{0 John Doe } 0} {{0 David Campbell } 0}]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',56),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);