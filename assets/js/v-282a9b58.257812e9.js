"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5525],{4798:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-282a9b58",path:"/blogs/React/useCallback.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"useCallback",slug:"usecallback",children:[]}],git:{},filePathRelative:"blogs/React/useCallback.md"}},5190:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});const e=(0,a(6252).uE)('<h2 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h2><p><strong><code>useCallback</code>与memo不同的是限制function，阻止页面不必要的重复渲染</strong></p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n<span class="token function">setCount</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>setCount<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),t={},c=(0,a(3744).Z)(t,[["render",function(s,n){return e}]])}}]);