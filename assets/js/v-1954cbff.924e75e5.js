"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[5706],{7210:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-1954cbff",path:"/blogs/React/React-%E5%AD%A6%E4%B9%A0.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"Stateful component【有状态组件】",slug:"stateful-component【有状态组件】",children:[]},{level:2,title:"Effect-hooks",slug:"effect-hooks",children:[{level:3,title:"React trick",slug:"react-trick",children:[]},{level:3,title:"自定义hook",slug:"自定义hook",children:[]},{level:3,title:"Redux",slug:"redux",children:[]}]}],git:{},filePathRelative:"blogs/React/React-学习.md"}},6071:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(6252).uE)('<h3 id="stateful-component【有状态组件】" tabindex="-1"><a class="header-anchor" href="#stateful-component【有状态组件】" aria-hidden="true">#</a> Stateful component【有状态组件】</h3><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useState } from &#39;react&#39;\n// 解构赋值\nconst [ counter, setCounter ] = useState(0)\n\n\n&lt;Greeting firstName=&#39;Arto&#39; lastName=&#39;Hellas&#39; /&gt;\n// 上下比较\nconst person = {\n  firstName: &#39;Arto&#39;,\n  lastName: &#39;Hellas&#39;\n}\n&lt;Greeting {...person} /&gt;\n// 效果同样\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p><em>counter</em> 变量被赋予的初始值<em>state</em> 为零。 变量 setCounter 被分配给一个函数，该函数将用于<em>修改 state</em>。</p></blockquote><p><code>setCounter</code>被调用时，React重新渲染这个组件</p><h2 id="effect-hooks" tabindex="-1"><a class="header-anchor" href="#effect-hooks" aria-hidden="true">#</a> Effect-hooks</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import React,{useState,useEffect} from &#39;react&#39;\nimport axios from &#39;axios&#39;\nconst hook = () =&gt; {\n  console.log(&#39;effect&#39;)\n  axios\n    .get(&#39;http://localhost:3001/notes&#39;)\n    .then(response =&gt; {\n      console.log(&#39;promise fulfilled&#39;)\n      setNotes(response.data)\n    })\n}\n\nuseEffect(hook, [])\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong><code>useEffect</code>有两个参数，第一个是函数本身，默认情况下effect总是在组件渲染之后才运行。第二个是运行频率，如果是一个空数组，那么只在组件第一次渲染时运行。</strong></p><h3 id="react-trick" tabindex="-1"><a class="header-anchor" href="#react-trick" aria-hidden="true">#</a> React trick</h3><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>{\n  user === null &amp;&amp; loginForm()\n}\n// 按条件渲染\n{\n    sign === null ? &lt;Login /&gt; :&lt;Signup /&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="自定义hook" tabindex="-1"><a class="header-anchor" href="#自定义hook" aria-hidden="true">#</a> 自定义hook</h3><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 下面是一个简单计数器\nimport React,{ useStete} from &#39;react&#39;\n\nconst App = ({counter,setCounter}) ={\n    const [counter, setCounter ] = useState(0)\n\treturn (\n    &lt;div&gt;\n        &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; setCounter(counter - 1)}&gt;\n        minus\n      &lt;/button&gt;      \n      &lt;button onClick={() =&gt; setCounter(0)}&gt;\n        zero\n      &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>把逻辑抽象到自定义hook，注意自定义Hook需要use开头，遵循hook规则</strong></p><blockquote><p><strong>不能从循环、条件表达式或任何不是定义组件的函数的地方调用 <em>useState</em> （同样的还有 <em>useEffect</em> 函数</strong></p></blockquote><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const useCounter = () =&gt;{\n    const[value,setValue] = useState(0)\n    const increase = ()=&gt;{\n        setValue(value +1)\n    }\n    const decrease = () =&gt; {\n    setValue(value - 1)\n  }\n\n  const zero = () =&gt; {\n    setValue(0)\n  }\n\n  return {\n    value, \n    increase,\n    decrease,\n    zero\n  }\n}\n// 使用\nconst App = (props) =&gt;{\n    const counter = useCounter()\n    return (\n    &lt;div&gt;\n      &lt;div&gt;{counter.value}&lt;/div&gt;\n      &lt;button onClick={counter.increase}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={counter.decrease}&gt;\n        minus\n      &lt;/button&gt;      \n      &lt;button onClick={counter.zero}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="redux" tabindex="-1"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> Redux</h3><p>Redux与<code>Flux</code>架构原理相同</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install redux\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://facebook.github.io/flux/img/overview/flux-simple-f8-diagram-explained-1300w.png" alt="123"></p><p><strong>通过Action驱动Store改变，从而视图更新</strong></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 简单的例子\nimport {createStore} from &#39;redux&#39;\n\n// Reducer\nconst counterReducer = (state =0,action)=&gt;{\n    switch (action.type) {\n    case &#39;INCREMENT&#39;:\n      return state + 1\n    case &#39;DECREMENT&#39;:\n      return state - 1\n    case &#39;ZERO&#39;:\n      return 0\n    default: // if none of the above matches, code comes here\n    return state\n}\n}\n// Reducer不应该直接从应用程序中调用，只作为创建store\nconst store = createStore(counterReducer)\n\n// store使用reducer来处理Action,通过dispatch分发到store\nconsole.log(store.getState())\nstore.dispatch({type: &#39;INCREMENT&#39;})\nstore.dispatch({type: &#39;INCREMENT&#39;})\nstore.dispatch({type: &#39;INCREMENT&#39;})\nconsole.log(store.getState())\nstore.dispatch({type: &#39;ZERO&#39;})\nstore.dispatch({type: &#39;DECREMENT&#39;})\nconsole.log(store.getState())\n\n// store第三个方法是订阅\nstore.subscribe(()=&gt;{\n    const storeNow = store.getState()\n    console.log(storeNow)\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><strong>制作一个计数工具，可以直接在<code>create-react-app</code>里的<code>index.js</code>中使用</strong></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { createStore } from &#39;redux&#39;\n\n// reducer\nconst counterReducer = (state = 0, action) =&gt; {\n  switch (action.type) {\n    case &#39;INCREMENT&#39;:\n      return state + 1\n    case &#39;DECREMENT&#39;:\n      return state - 1\n    case &#39;ZERO&#39;:\n      return 0\n    default:\n      return state\n  }\n}\n\n// reducer创建store\nconst store = createStore(counterReducer)\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        {store.getState()}\n      &lt;/div&gt;\n      &lt;button \n        onClick={e =&gt; store.dispatch({ type: &#39;INCREMENT&#39; })}\n      &gt;\n        plus\n      &lt;/button&gt;\n      &lt;button\n        onClick={e =&gt; store.dispatch({ type: &#39;DECREMENT&#39; })}\n      &gt;\n        minus\n      &lt;/button&gt;\n      &lt;button \n        onClick={e =&gt; store.dispatch({ type: &#39;ZERO&#39; })}\n      &gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nconst renderApp = () =&gt; {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;))\n}\n\nrenderApp()\n// 订阅\nstore.subscribe(renderApp)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p><strong>比较重要的一点是redux中的状态更改必须不改变旧对象，而是新建一个对象...</strong></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>state.push([&#39;1&#39;]) // 这个不行，如果状态改变，旧对象也会被改变\nstate.concat([&#39;1&#39;]) // yes!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',24),r={},l=(0,e(3744).Z)(r,[["render",function(n,s){return a}]])}}]);