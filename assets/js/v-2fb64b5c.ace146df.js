"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[6734],{7455:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2fb64b5c",path:"/blogs/Python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",title:"正则表达式",lang:"en-US",frontmatter:{title:"正则表达式",date:"2021/07/01",tags:["python"],categories:["Python"]},excerpt:"",headers:[{level:2,title:"正则表达式",slug:"正则表达式",children:[{level:3,title:"按类型匹配",slug:"按类型匹配",children:[]},{level:3,title:"findall",slug:"findall",children:[]},{level:3,title:"如何巧妙的替换、分割字符串",slug:"如何巧妙的替换、分割字符串",children:[]},{level:3,title:"封装一个正则表达式",slug:"封装一个正则表达式",children:[]}]}],git:{},filePathRelative:"blogs/Python/正则表达式.md"}},3915:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><h3 id="按类型匹配" tabindex="-1"><a class="header-anchor" href="#按类型匹配" aria-hidden="true">#</a> 按类型匹配</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#按类型匹配</span>\n\\d <span class="token punctuation">:</span> 任何数字\n\\D <span class="token punctuation">:</span> 不是数字\n\\s <span class="token punctuation">:</span> 任何 white space<span class="token punctuation">,</span> 如 <span class="token punctuation">[</span>\\t\\n\\r\\f\\v<span class="token punctuation">]</span>\n\\S <span class="token punctuation">:</span> 不是 white space\n\\w <span class="token punctuation">:</span> 任何大小写字母<span class="token punctuation">,</span> 数字和 “” <span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\n\\W <span class="token punctuation">:</span> 不是 \\w\n\\b <span class="token punctuation">:</span> 空白字符 <span class="token punctuation">(</span>只在某个字的开头或结尾<span class="token punctuation">)</span>\n\\B <span class="token punctuation">:</span> 空白字符 <span class="token punctuation">(</span>不在某个字的开头或结尾<span class="token punctuation">)</span>\n\\\\ <span class="token punctuation">:</span> 匹配 \\\n<span class="token punctuation">.</span> <span class="token punctuation">:</span> 匹配任何字符 <span class="token punctuation">(</span>除了 \\n<span class="token punctuation">)</span>\n<span class="token operator">^</span> <span class="token punctuation">:</span> 匹配开头\n$ <span class="token punctuation">:</span> 匹配结尾\n? <span class="token punctuation">:</span> 前面的字符可有可无\n<span class="token operator">*</span> <span class="token punctuation">:</span> 重复零次或多次\n<span class="token operator">+</span> <span class="token punctuation">:</span> 重复一次或多次\n<span class="token punctuation">{</span>n<span class="token punctuation">,</span> m<span class="token punctuation">}</span> <span class="token punctuation">:</span> 重复 n 至 m 次\n<span class="token punctuation">{</span>n<span class="token punctuation">}</span> <span class="token punctuation">:</span> 重复 n 次\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果一个字符串有很多行, 我们想使用 ^ 形式来匹配行开头的字符, 如果用通常的形式是不成功的. 比如下面的 “I” 出现在第二行开头, 但是使用 r&quot;^I&quot; 却匹配不到第二行, 这时候, 我们要使用 另外一个参数, 让 <code>re.search()</code> 可以对每一行单独处理. 这个参数就是 <code>flags=re.M</code>, 或者这样写也行 <code>flags=re.MULTILINE</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;\ndog runs to cat.\nI run to dog.\n&quot;&quot;&quot;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&quot;^I&quot;</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># None</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&quot;^I&quot;</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span>  \n<span class="token comment"># &lt;_sre.SRE_Match object; span=(18, 19), match=&#39;I&#39;&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&quot;(\\d+), Date: (.+)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ID: 021523, Date: Feb/12/2017&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment"># 021523, Date: Feb/12/2017</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment"># 021523</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment"># Date: Feb/12/2017</span>\n我们甚至可以为找到的内容分组<span class="token punctuation">,</span> 使用 <span class="token punctuation">(</span><span class="token punctuation">)</span> 能轻松实现这件事<span class="token punctuation">.</span> \n通过分组<span class="token punctuation">,</span> 我们能轻松定位所找到的内容<span class="token punctuation">.</span> \n比如在这个 <span class="token punctuation">(</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span> 组里<span class="token punctuation">,</span> 需要找到的是一些数字<span class="token punctuation">,</span> \n在 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span> 这个组里<span class="token punctuation">,</span> 我们会找到 “Date<span class="token punctuation">:</span> “ 后面的所有内容<span class="token punctuation">.</span> \n当使用 <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> 时<span class="token punctuation">,</span> 他会返回所有组里的内容<span class="token punctuation">,</span> \n<span class="token operator">//</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">021523</span>\n而如果给 <span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 里加一个数<span class="token punctuation">,</span> 它就能定位你需要返回哪个组里的信息<span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="findall" tabindex="-1"><a class="header-anchor" href="#findall" aria-hidden="true">#</a> findall</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># findall 找到所有项返回一个列表</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&quot;r[ua]n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;run ran ren&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    \n<span class="token comment"># [&#39;run&#39;, &#39;ran&#39;]</span>\n\n<span class="token comment"># | : or</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&quot;(run|ran)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;run ran ren&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n<span class="token comment"># [&#39;run&#39;, &#39;ran&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="如何巧妙的替换、分割字符串" tabindex="-1"><a class="header-anchor" href="#如何巧妙的替换、分割字符串" aria-hidden="true">#</a> 如何巧妙的替换、分割字符串</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&quot;r[au]ns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;catches&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dog runs to cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  \n<span class="token comment"># dog catches to cat</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r&quot;[,;\\.]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a;b,c.d;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  \n<span class="token comment"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="封装一个正则表达式" tabindex="-1"><a class="header-anchor" href="#封装一个正则表达式" aria-hidden="true">#</a> 封装一个正则表达式</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>compiled_re <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&quot;r[ua]n&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>compiled_re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;dog ran to cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n<span class="token comment"># &lt;_sre.SRE_Match object; span=(4, 7), match=&#39;ran&#39;&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',12),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);