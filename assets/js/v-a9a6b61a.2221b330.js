"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[1315],{8538:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a9a6b61a",path:"/blogs/Golang/Go%E4%B8%AD%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Go中错误处理和日志记录",slug:"go中错误处理和日志记录",children:[]},{level:2,title:"日志log",slug:"日志log",children:[]}],git:{},filePathRelative:"blogs/Golang/Go中错误处理和日志记录.md"}},8270:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="go中错误处理和日志记录" tabindex="-1"><a class="header-anchor" href="#go中错误处理和日志记录" aria-hidden="true">#</a> Go中错误处理和日志记录</h2><p><strong>!!!!编写程序时，需要考虑程序失败的各种方式，并且需要管理失败。 无需让用户看到冗长而混乱的堆栈跟踪错误。 让他们看到有关错误的有意义的信息更好。</strong></p><p><strong>在 Go 中处理错误时，请记住下面一些推荐做法：</strong></p><ul><li><strong>始终检查是否存在错误，即使预期不存在。 然后正确处理它们，以免向最终用户公开不必要的信息。</strong></li><li><strong>在错误消息中包含一个前缀，以便了解错误的来源。 例如，可以包含包和函数的名称。</strong></li><li><strong>创建尽可能多的可重用错误变量。</strong></li><li><strong>了解使用返回错误和 panic 之间的差异。 不能执行其他操作时再使用 panic。 例如，如果某个依赖项未准备就绪，则程序运行无意义（除非你想要运行默认行为）。</strong></li><li><strong>在记录错误时记录尽可能多的详细信息（我们将在下一部分介绍记录方法），并打印出最终用户能够理解的错误</strong></li></ul><p>Go 的错误处理方法只是一种只需要 <code>if</code> 和 <code>return</code> 语句的控制流机制。 例如，在调用函数以从 <code>employee</code> 对象获取信息时，可能需要了解该员工是否存在。 Go 处理此类预期错误的一贯方法如下所示：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>employee<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getInformation</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Something is wrong. Do something.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;os&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID        <span class="token builtin">int</span>\n    FirstName <span class="token builtin">string</span>\n    LastName  <span class="token builtin">string</span>\n    Address   <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要处理错误</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    employee<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getInformation</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Something is wrong. Do something.</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要处理错误</span>\n<span class="token keyword">func</span> <span class="token function">getInformation</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Employee<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    employee<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">apiCallEmployee</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> employee<span class="token punctuation">,</span> err\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要处理错误</span>\n<span class="token keyword">func</span> <span class="token function">apiCallEmployee</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Employee<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    employee <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>LastName<span class="token punctuation">:</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">&amp;</span>employee<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>处理错误</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">getInformation</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Employee<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    employee<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">apiCallEmployee</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err <span class="token comment">// Simply return the error to the caller.</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> employee<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="日志log" tabindex="-1"><a class="header-anchor" href="#日志log" aria-hidden="true">#</a> 日志log</h2><p>Go自带了一个</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;log&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, I&#39;m a log!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2020/12/19 13:39:17 Hey, I&#39;m a log!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;log&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// log.Fatal()会报错且结束程序</span>\n    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, I&#39;m an error log!&quot;</span><span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Can you see me?&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2020/12/19 13:53:19  Hey, I&#39;m an error log!</span>\n<span class="token comment">// exit status 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;log&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 设置log消息前缀</span>\n    log<span class="token punctuation">.</span><span class="token function">SetPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;main(): &quot;</span><span class="token punctuation">)</span>\n    log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, I&#39;m a log!&quot;</span><span class="token punctuation">)</span>\n    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, I&#39;m an error log!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>记录到文件</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;log&quot;</span>\n    <span class="token string">&quot;os&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;info.log&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    log<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, I&#39;m a log!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>推荐用第三方记录框架.</strong></p>',17),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);