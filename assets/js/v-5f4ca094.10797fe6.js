"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[1131],{1173:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-5f4ca094",path:"/blogs/tech/Dockerfile%E5%AD%A6%E4%B9%A0.html",title:"Dockerfile学习",lang:"en-US",frontmatter:{title:"Dockerfile学习",date:"2021/03/02",tags:["dockerfile","docker"],categories:["tech"]},excerpt:"<p><strong>阅读本文需要1.5分钟</strong></p>\n",headers:[{level:2,title:"简单速度使用版",slug:"简单速度使用版",children:[]},{level:2,title:"Dockerfile？",slug:"dockerfile",children:[]},{level:2,title:"关于优化",slug:"关于优化",children:[]}],git:{},filePathRelative:"blogs/tech/Dockerfile学习.md"}},3324:(e,n,s)=>{s.r(n),s.d(n,{default:()=>d});var a=s(6252);const l=(0,a.uE)('<p><strong>阅读本文需要1.5分钟</strong></p><h2 id="简单速度使用版" tabindex="-1"><a class="header-anchor" href="#简单速度使用版" aria-hidden="true">#</a> 简单速度使用版</h2><p><strong>就是你下载了别人的dockerfile，且代码完备，在同一个根目录下</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.\n├── app\n│   └── main.py\n└── Dockerfile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 网上没有这么直接的使用dockerfile的方法，千篇一律介绍怎么写file</span>\n<span class="token function">docker</span> build -t myimage <span class="token builtin class-name">.</span>\n<span class="token comment"># -d 后台 -p 端口：意思你80的端口借给容器用</span>\n<span class="token function">docker</span> run -d --name mycontainer -p <span class="token number">80</span>:80 myimage\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile？</h2><p><strong>首先学习思维，外网的教学，<u>无外乎把Dockerfile制作容器的方法放在第一位，并且可能仅有这种方法</u>，目的就是先学好思维，避免学习上造无用轮子。</strong></p><ul><li><p>简单介绍流程</p><p><strong>Dockerfile是把拉镜像，增加所需（比如安装依赖，clone代码等）执行过程整合成一个文件也就是Dockerfile</strong></p></li><li><p>简单例子，看完估计大部分情况都能解决了</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 拉一个ubuntu镜像</span>\nFROM ubuntu\n<span class="token comment"># 与Dockerfile同目录下的app文件夹复制进镜像</span>\nCOPY ./app /app\n<span class="token comment"># 镜像里更新源和装vim编辑器，随后你run一个容器就行了</span>\nRUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="关于优化" tabindex="-1"><a class="header-anchor" href="#关于优化" aria-hidden="true">#</a> 关于优化</h2>',9),r=(0,a.Uk)("有一篇"),p={href:"https://www.infoq.cn/article/3-simple-tricks-for-smaller-docker-images",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Uk)("文章"),c=(0,a.Uk)("写的比较好，可以参考."),i=(0,a._)("p",null,[(0,a._)("strong",null,"但是对于python来说，使用Alpine版会出现很多莫名的bug，即使压缩节省了很多的空间，最终如果代码运行环境不稳定恶劣化，多牛逼的优化都算是鬼画符。")],-1),o=(0,a._)("p",null,[(0,a._)("strong",null,"最后。勤动手上网查，大佬提供的dockerfile都是挺好的，毕竟只有代码是自己的[Doge]")],-1),u={},d=(0,s(3744).Z)(u,[["render",function(e,n){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[r,(0,a._)("a",p,[t,(0,a.Wm)(s)]),c]),i,o],64)}]])}}]);