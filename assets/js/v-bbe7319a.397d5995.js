"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[8413],{1169:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-bbe7319a",path:"/blogs/front/CSS.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"CSS",slug:"css",children:[{level:3,title:"Flex",slug:"flex",children:[]},{level:3,title:"Grid",slug:"grid",children:[]},{level:3,title:"BFC",slug:"bfc",children:[]},{level:3,title:"IFC",slug:"ifc",children:[]},{level:3,title:"定位",slug:"定位",children:[]},{level:3,title:"px、em、rem、rpx、vh/wh",slug:"px、em、rem、rpx、vh-wh",children:[]},{level:3,title:"CSS 响应式布局",slug:"css-响应式布局",children:[]},{level:3,title:"盒模型",slug:"盒模型",children:[]},{level:3,title:"CSS3 新增",slug:"css3-新增",children:[]},{level:3,title:"Word-wrap",slug:"word-wrap",children:[]},{level:3,title:"Text-overflow",slug:"text-overflow",children:[]},{level:3,title:"隐藏样式的方法",slug:"隐藏样式的方法",children:[]}]}],git:{},filePathRelative:"blogs/front/CSS.md"}},3828:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const p=(0,e.uE)('<h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><p>所有元素可继承：visibility 和 cursor。 内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。 终端块状元素可继承：text-indent 和 text-align。 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image</p><h3 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> Flex</h3><blockquote><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性 flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto</p></blockquote><p><strong>如果应用 Flex 布局，父容器样式一定设置 display:flex</strong></p><p><strong>默认情况下 flex 布局是不会换行</strong></p><p><strong><code>flex-wrap</code>属性决定可以不可以换行显示</strong></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> <span class="token comment">/* Default value */</span>\n<span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>\n<span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span>\n\n<span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> <span class="token comment">/* (column or -reverse) */</span>\n<span class="token comment">/* 优雅的合并一起写 */</span>\n<span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a> Flex-basis</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* display:flex 默认自动填充富余空间*/</span>\n<span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token comment">/* 不自动填充大小，指定100px */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="flex-grow" tabindex="-1"><a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a> <strong>Flex-grow</strong></h4><p>以<code>basis</code>为基础，沿主轴增长尺寸。</p><p>按比例填充空间</p><p>如果<code>flex-basis:100px;</code>第一个元素 <code>flex-grow</code> 值为 2， 其他元素值为 1，则第一个元素将占有 2/4（即为 200px 中的 100px）</p><h4 id="flex-shrink" tabindex="-1"><a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a> <strong>flex-shrink</strong></h4><p><code>flex-grow</code>是子容器被拉伸，那么对应的，<code>flex-shrink</code>则是压缩子容器（<strong>也就是子容器超过了父容器的宽度</strong>）。</p><p><strong>如果没有超出，使用是无效的，压缩一般我们不使用，美工 UI 会提刀的</strong></p><blockquote><p>max-width/min-width &gt; flex-basis &gt; width &gt; box</p></blockquote><h4 id="flex-简写" tabindex="-1"><a class="header-anchor" href="#flex-简写" aria-hidden="true">#</a> Flex 简写</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.box</span><span class="token punctuation">{</span>\n <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.one</span><span class="token punctuation">{</span>\n\t<span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto <span class="token comment">/* 第一个grow，第二个shrink,三是basis */</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* 简写开始 */</span>\n<span class="token property">flex</span><span class="token punctuation">:</span> initial <span class="token comment">/* 0 1 auto  0不会超过basis*/</span>\n<span class="token property">flex</span><span class="token punctuation">:</span> auto <span class="token comment">/* 1 1 auto */</span>\n<span class="token property">flex</span><span class="token punctuation">:</span> none <span class="token comment">/* 0 0 auto */</span>\n<span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* 1 1 0*/</span>\n<span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> <span class="token comment">/* 2 1 0*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="align-items" tabindex="-1"><a class="header-anchor" href="#align-items" aria-hidden="true">#</a> align-items</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n\t<span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* \n\t默认是stretch，全部元素跟着最大的元素变大\n\tflex-start: 贴在上边框，不会变\n\tflex-end: 贴在下边框，同上\n\tcenter: 在中间，同上\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="justify-content" tabindex="-1"><a class="header-anchor" href="#justify-content" aria-hidden="true">#</a> justify-content</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n\t<span class="token property">justify-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* \n\t默认是stretch\n\tflex-start: \n\tflex-end: \n\tcenter: \n\tspace-around: 还是看下面图吧\n\tspace-between: 还是看下面图吧\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://raw.githubusercontent.com/googidaddy/img/master/img/20210904150924.png" alt="123"></p><p><img src="https://raw.githubusercontent.com/googidaddy/img/master/img/20210904150955.png" alt="123123"></p><h4 id="简单应用场景" tabindex="-1"><a class="header-anchor" href="#简单应用场景" aria-hidden="true">#</a> 简单应用场景</h4><p>在 main 容器，你想上下两个固定住，那么中间设置<code>flex-grow:1</code>也就是充满，自然你怎么调上下两个都不会挤到一起去。</p><p><strong>输入框使用的话，充满有奇效</strong></p><h3 id="grid" tabindex="-1"><a class="header-anchor" href="#grid" aria-hidden="true">#</a> Grid</h3><p><strong>一般来说 Grid 比较冷门（才怪），适合多行多列。</strong></p>',31),t={href:"https://juejin.cn/post/6846687583431294984#heading-43",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("取材"),r=(0,e.uE)('<p><strong>几个方法</strong></p><p><code>repeat()</code>简化重复值，<code>grid-template-columns: repeat(3, 100px)</code>=<code>grid-template-columns: 100px 100px 100px</code></p><p><code>minmax(min,max)</code>宽度大于等于 min，小于等于 max</p><p><code>row-gap</code>行间距，可取单位值或百分比</p><p><code>column-gap</code>列间距，同上</p><p><code>gap</code>是上面两个简写的属性，<code>gap:&lt;row-gap&gt; &lt;column-gap&gt;</code>，只有一个数字表示两个值同样</p><p><code>fr</code>定义网格占剩余空间比例</p><h4 id="侧边栏布局" tabindex="-1"><a class="header-anchor" href="#侧边栏布局" aria-hidden="true">#</a> 侧边栏布局</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> 25%<span class="token punctuation">)</span> 1fr<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>父容器使用 grid 布局，左边小到 150px 不能再改变，最大不能超过 25%，适合不同屏幕尺寸的浏览器。</p></blockquote><h4 id="头尾固定的布局" tabindex="-1"><a class="header-anchor" href="#头尾固定的布局" aria-hidden="true">#</a> 头尾固定的布局</h4><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> auto 1fr auto<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>分三行，中间自适应，剩下固定。</p></blockquote><h4 id="圣杯布局" tabindex="-1"><a class="header-anchor" href="#圣杯布局" aria-hidden="true">#</a> 圣杯布局</h4><p><strong>圣杯布局是指除了中间 main 其他都固定的布局。</strong></p><p><strong>圣杯布局和双飞翼布局都是实现三栏布局的方法，左右定宽，中间自适应。</strong></p><p><img src="C:\\Users\\domado\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210310192230040.png" alt="image-20210310192230040"></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n<span class="token property">grid-template</span><span class="token punctuation">:</span> auto 1fr auto / auto 1fr auto<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>上下分三行，左右分三行，上下左右固定高度，中间自适应</p></blockquote><h4 id="网格系统下-justify-content-水平布局" tabindex="-1"><a class="header-anchor" href="#网格系统下-justify-content-水平布局" aria-hidden="true">#</a> 网格系统下 justify-content 水平布局</h4><ul><li><p>start(默认值): 水平方向上向左进行靠拢</p></li><li><p>end: 水平方向上向右进行靠拢</p></li><li><p>center: 居中对齐</p></li><li><p>stretch: 自适应拉伸</p></li><li><p>space-around: 单元格周围具有相同空白</p></li><li><p>space-between: 单元格向两端靠齐并且单元格中间具有等比例的空白, 单元格和边界不存在空白</p></li><li><p>space-evenly：同上但是存在空白</p></li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// example for center\n.container</span> <span class="token punctuation">{</span>\n\t<span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> inline-grid<span class="token punctuation">;</span>\n\t<span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n\t<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>$<span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">,</span> $<span class="token property">alpha</span><span class="token punctuation">:</span> 0.04<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="网格系统下-align-content-垂直布局" tabindex="-1"><a class="header-anchor" href="#网格系统下-align-content-垂直布局" aria-hidden="true">#</a> 网格系统下 align-content 垂直布局</h4><ul><li>start(默认值): 垂直方向上向上进行靠拢</li><li>end: 垂直方向上向下进行靠拢</li><li>center: 居中对齐</li><li>stretch: 自适应拉伸</li><li>space-around: 单元格周围具有相同空白</li><li>space-between: 单元格向两端靠齐并且单元格中间具有等比例的空白, 单元格和边界不存在空白</li><li>space-evenly: 同上但是存在空白</li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// example for align-content\n.main</span> <span class="token punctuation">{</span>\n\t<span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n\t<span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n\t<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>#0000<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="place-content" tabindex="-1"><a class="header-anchor" href="#place-content" aria-hidden="true">#</a> place-content</h4><blockquote><p><strong>place-content 是 justify-content、align-content 的简写属性</strong></p></blockquote><p><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// example for place-content\n.main</span> <span class="token punctuation">{</span>\n\t<span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n\t<span class="token property">place-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n\t<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>#0000<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="单元格-justify-items、align-items、place-items" tabindex="-1"><a class="header-anchor" href="#单元格-justify-items、align-items、place-items" aria-hidden="true">#</a> 单元格 justify-items、align-items、place-items</h4><ul><li>start(默认值): 向左靠拢</li><li>end: 向右靠拢</li><li>center: 居中对齐</li><li>stretch: 自适应拉伸</li></ul><p><strong>这个单元格与网格区别在于是整体元素还是单一元素</strong></p><p>对比：</p><h3 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h3><blockquote><p>块级格式化上下文,它是一个独立的渲染区域，只有 Block-level box 参与， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p></blockquote><p>内部的 Box 会在垂直方向，一个接一个地放置。</p><p>Box 垂直方向的距离由 margin 决定。属于<strong>同一个</strong>BFC 的两个相邻 Box 的 margin 会发生重叠。</p><p>每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>BFC 的区域不会与 float box 重叠。</p><p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>计算 BFC 的高度时，浮动元素也参与计算。</p><h4 id="创建-bfc" tabindex="-1"><a class="header-anchor" href="#创建-bfc" aria-hidden="true">#</a> 创建 BFC</h4><p>float 的值不是 none。</p><p>position 的值不是 static 或者 relative。</p><p>display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex</p><p>overflow 的值不是 visible</p><h3 id="ifc" tabindex="-1"><a class="header-anchor" href="#ifc" aria-hidden="true">#</a> IFC</h3><p><strong>框会从包含块的顶部开始，一个接一个地水平摆放。 摆放这些框的时候，它们在水平方向上的外边距、边框、内边距所占用的空间都会被考虑在内。在垂直方向上，这些框可能会以不同形式来对齐：它们可能会把底部或顶部对齐，也可能把其内部的文本基线对齐。能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框。水平的 margin、padding、border 有效，垂直无效。不能指定宽高。 行框的宽度是由包含块和存在的浮动来决定。行框的高度由行高计算这一章所描述的规则来决定。</strong></p><h3 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h3>',49),c={href:"https://juejin.cn/post/6921253238264365063",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("取材"),i=(0,e.uE)('<h4 id="position" tabindex="-1"><a class="header-anchor" href="#position" aria-hidden="true">#</a> position</h4><p>static(静态):html 元素的默认值，不受 top、bottom、left、right 属性影响，元素出现在正常文档流中；</p><p>relative（相对）：相对定位</p><p>特点：不脱离文档流的布局，受 top、bottom、left、right 属性影响，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流的位置。</p><p>absolute（绝对）：绝对定位</p><p>特点：脱离文档流的布局，遗留下来的空间由后面的元素填充。定位的起始位置为最近的父元素（position 不为 static），否则为 HTML 文档本身。</p><p>fixed（固定）：固定定位</p><p>特点：类似于 absolute，但不随着滚动条的移动而改变位置。元素的位置相对于浏览器窗口是固定位置。</p><h3 id="px、em、rem、rpx、vh-wh" tabindex="-1"><a class="header-anchor" href="#px、em、rem、rpx、vh-wh" aria-hidden="true">#</a> px、em、rem、rpx、vh/wh</h3><h4 id="px" tabindex="-1"><a class="header-anchor" href="#px" aria-hidden="true">#</a> px</h4><p><strong>利用 px 设置字体大小及元素宽高等比较稳定和精确。Px 的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站</strong></p><h4 id="em" tabindex="-1"><a class="header-anchor" href="#em" aria-hidden="true">#</a> em</h4><p>相对于父级字体长度单位计算，一般默认<strong>16px</strong></p><blockquote><p>h1 字体为 1.5em=1.5x16px=24px</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// 如果自身定义font-size按自身计算，整个页面内1em不是固定的值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="rem" tabindex="-1"><a class="header-anchor" href="#rem" aria-hidden="true">#</a> rem</h4><p>css3 新增，相对于 html 根元素的字体大小计算, 不同于 em 使用级联的方式</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">h1</span> <span class="token punctuation">{</span>\n\t<span class="token property">font-size</span><span class="token punctuation">:</span> 62.5%<span class="token punctuation">;</span> //10px\n\t<span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span> // 10px\n<span class="token punctuation">}</span>\n// h1-padding = 1x16px=16px\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="rpx" tabindex="-1"><a class="header-anchor" href="#rpx" aria-hidden="true">#</a> rpx</h4><p>根据屏幕宽度进行自适应</p><h4 id="vh、vw" tabindex="-1"><a class="header-anchor" href="#vh、vw" aria-hidden="true">#</a> vh、vw</h4><p>相对于视窗的高度，视窗高度是 100vh，视窗宽度是 100vw</p><p><strong>主要用于页面视口大小布局，在页面布局上更加方便简单</strong></p><p><strong>总结</strong></p><p><strong>适配少部分手机设备，且分辨率对页面影响不大，使用 px。</strong></p><p><strong>对于需要适配各种移动设备，使用 rem.</strong></p><h3 id="css-响应式布局" tabindex="-1"><a class="header-anchor" href="#css-响应式布局" aria-hidden="true">#</a> CSS 响应式布局</h3><h4 id="设置-meta-标签" tabindex="-1"><a class="header-anchor" href="#设置-meta-标签" aria-hidden="true">#</a> 设置 meta 标签</h4><p><strong>设置 name=&quot;viewport&quot;</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>\n\t<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>\n\t<span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="媒体查询" tabindex="-1"><a class="header-anchor" href="#媒体查询" aria-hidden="true">#</a> 媒体查询</h4><ul><li>媒体查询可以针对<strong>不同的媒体类型</strong>(screen print)定义不同的样式</li><li>媒体查询根据 <strong>条件判断</strong> 告诉浏览器如何针对<strong>不同的宽度</strong>渲染页面</li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* 随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式 */</span>\n<span class="token comment">/* 移动端优先使用min-width */</span>\n<span class="token comment">/* iphone6 7 8 plus */</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t<span class="token selector">body</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* ipad */</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t<span class="token selector">body</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* PC端优先使用max-width */</span>\n<span class="token comment">/* pc width &gt; 1024px */</span>\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n\t<span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* ipad pro */</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t<span class="token selector">body</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> #ff00ff<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="rem-布局" tabindex="-1"><a class="header-anchor" href="#rem-布局" aria-hidden="true">#</a> rem 布局</h4><p>根元素的 font-size 提供了一个基准，其他元素以 rem 为固定单位定义大小。</p><p>需要根据视图容器的大小，动态的改变根元素 font-size，其他元素也会发生响应式的变化。</p><p>在 CSS 样式之前要写一段 JS 代码，动态控制根元素 font-size 的大小。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">refreshRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement\n\t<span class="token keyword">var</span> width <span class="token operator">=</span> docEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width\n\t<span class="token keyword">var</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">10</span>\n\tdocEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>\n\tflexible<span class="token punctuation">.</span>rem <span class="token operator">=</span> win<span class="token punctuation">.</span>rem <span class="token operator">=</span> rem\n<span class="token punctuation">}</span>\nwin<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> refreshRem<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>利用媒体查询，设置 rem 在不同设备下的值</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* ipad pro */</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t<span class="token selector">body</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> #ff00ff<span class="token punctuation">;</span>\n\t\t<span class="token property">font-size</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="max-width" tabindex="-1"><a class="header-anchor" href="#max-width" aria-hidden="true">#</a> max-width</h4><p>max-width 保证图片最大宽度为其容器的 100%。如果图片宽度超过了其容器，图片会缩放，占满最大可用空间。</p><p>不能用 width: 100% 。这条规则会导致他显示的跟容器始终一样宽。在容器比图片宽的多的情况下，图片被无限拉伸。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> // 元素相对于周围内容以内联形式呈现，但可以设置宽度和高度\n\t<span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n\t<span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> // 保证图片进行等比缩放而不至于失真\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="background-image" tabindex="-1"><a class="header-anchor" href="#background-image" aria-hidden="true">#</a> background-image</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.banner{\n  background-image: url(/static/large.jpg);\n}\n\n@media screen and (max-width: 767px){\n  background-image: url(/static/small.jpg);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="其他方案" tabindex="-1"><a class="header-anchor" href="#其他方案" aria-hidden="true">#</a> 其他方案</h4><ul><li>Flex 弹性布局</li><li>Grid 网格布局</li><li>Columns 栅格系统，往往需要依赖某个 UI 库，如 Bootstrap,element ui,antd</li></ul><h3 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h3><p><strong>CSS 盒模型有两种，一种是 content-box 一种是 border-box</strong></p><blockquote><p>content-box 的宽度 width 表示内容区的宽度，不包含 padding 和 border； border-box 的宽度 width 表示内容区 + padding + border 的总和。 一般优先使用后者。</p></blockquote><h4 id="block-box-块级盒子-inline-box-内联盒子" tabindex="-1"><a class="header-anchor" href="#block-box-块级盒子-inline-box-内联盒子" aria-hidden="true">#</a> block box(块级盒子) inline box(内联盒子)</h4>',52),u={href:"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("取材"),d=(0,e.uE)('<p><strong>block</strong></p><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li><a href=""><code>width</code></a> 和 <a href=""><code>height</code></a> 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”</li></ul><p><strong>inline</strong></p><ul><li>盒子不会产生换行。</li><li><a href=""><code>width</code></a> 和 <a href=""><code>height</code></a> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">&lt;p\n\t&gt; i\n\tam\n\ta\n\tparagraph.\n\ta\n\tshort\n\tone.&lt;/p\n\t&gt; &lt;ul\n\t&gt; &lt;li\n\t&gt; Item\n\tOne&lt;/li\n\t&gt; &lt;li\n\t&gt; Item\n\tTwo&lt;/li\n\t&gt; &lt;li\n\t&gt; Item\n\tThree&lt;/li\n\t&gt; &lt;/ul\n\t&gt; &lt;p\n\t&gt; i\n\tam\n\tanother\n\tparagraph.\n\tSome\n\tof\n\tthe\n\t&lt;span\n\tclass=&#39;block&#39;\n\t&gt; words&lt;/span\n\t&gt; have\n\tbeen\n\twrapped\n\tin\n\ta\n\t&lt;span\n\t&gt; span\n\telement&lt;/span\n\t&gt; .&lt;/p\n\t&gt; p,\nul</span> <span class="token punctuation">{</span>\n\t<span class="token property">border</span><span class="token punctuation">:</span> 2px solid rebeccapurple<span class="token punctuation">;</span>\n\t<span class="token property">padding</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.block,\nli</span> <span class="token punctuation">{</span>\n\t<span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span>\n\t<span class="token property">padding</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">ul</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n\t<span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.block</span> <span class="token punctuation">{</span>\n\t<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="css3-新增" tabindex="-1"><a class="header-anchor" href="#css3-新增" aria-hidden="true">#</a> CSS3 新增</h3><h4 id="font-face" tabindex="-1"><a class="header-anchor" href="#font-face" aria-hidden="true">#</a> @Font-face</h4><h4 id="word-wrap-text-overflow-样式" tabindex="-1"><a class="header-anchor" href="#word-wrap-text-overflow-样式" aria-hidden="true">#</a> Word-wrap &amp; Text-overflow 样式</h4><h3 id="word-wrap" tabindex="-1"><a class="header-anchor" href="#word-wrap" aria-hidden="true">#</a> Word-wrap</h3><p>设置<code>word-wrap: break-word</code>的话，在单词换行的情况下，可保持单词的完整性。</p><h3 id="text-overflow" tabindex="-1"><a class="header-anchor" href="#text-overflow" aria-hidden="true">#</a> Text-overflow</h3><p>它与 word-wrap 是协同工作的，word-wrap 设置或检索当当前行超过指定容器的边界时是否断开转行，而 text-overflow 则设置或检索当当前行超过指定容器的边界时如何显示, 我们在父容器设置<code>overflow: hidden</code>, 然后设置“text-overflow”属性，有“clip”和“ellipsis”两种可供选择。&quot;clip&quot;表示直接切割，&quot;ellipsis&quot;表示用省略号代替。</p><h4 id="文字渲染-text-decoration" tabindex="-1"><a class="header-anchor" href="#文字渲染-text-decoration" aria-hidden="true">#</a> 文字渲染(Text-decoration)</h4><ul><li>Text-fill-color: 文字内部填充颜色</li><li>Text-stroke-color: 文字边界填充颜色</li><li>Text-stroke-width: 文字边界宽度</li></ul><h4 id="多列布局-muti-column-layout" tabindex="-1"><a class="header-anchor" href="#多列布局-muti-column-layout" aria-hidden="true">#</a> 多列布局(muti-column layout)</h4><ul><li>Column-count：表示布局几列。</li><li>Column-rule：表示列与列之间的间隔条的样式</li><li>Column-gap：表示列于列之间的间隔</li></ul><h4 id="边框和颜色-color-border" tabindex="-1"><a class="header-anchor" href="#边框和颜色-color-border" aria-hidden="true">#</a> 边框和颜色(color, border)</h4><p>支持<code>rgba</code>和<code>hsl</code>表示颜色, 支持圆角，阴影等效果。</p><h4 id="渐变效果" tabindex="-1"><a class="header-anchor" href="#渐变效果" aria-hidden="true">#</a> 渐变效果</h4><p>支持线性渐变和径向渐变</p><h4 id="阴影和反射" tabindex="-1"><a class="header-anchor" href="#阴影和反射" aria-hidden="true">#</a> 阴影和反射</h4><p>阴影效果，阴影效果既可用于普通元素，也可用于文字。</p><h4 id="背景效果" tabindex="-1"><a class="header-anchor" href="#背景效果" aria-hidden="true">#</a> 背景效果</h4><ul><li>“Background Clip”，该属确定背景画区</li><li>“Background Origin”，用于确定背景的位置，它通常与 background-position 联合使用，您可以从 border、padding、content 来计算 background-position（就像 background-clip）。</li><li>“Background Size”，常用来调整背景图片的大小，注意别和 clip 弄混，这个主要用于设定图片本身。</li><li>“Background Break”属性，CSS3 中，元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示。</li><li>多背景图片支持</li></ul><h4 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>display: -webkit-box;\ndisplay: -moz-box;\n-webkit-box-orient: horizontal;\n-moz-box-orient: horizontal;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>“display: -webkit-box; display: -moz-box;”，它针对 webkit 和 gecko 浏览器定义了该元素的盒子模型。注意这里的“-webkit-box-orient: horizontal;”，他表示水平排列的盒子模型。如果配合元素的<code>box-flex</code>属性：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.flex {\n     -webkit-box-flex: 1;\n     -moz-box-flex: 1;\n }\n\n .flex2 {\n     -webkit-box-flex: 2;\n     -moz-box-flex: 2;\n }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>水平方向设下的宽度，就可以按照 1:2 的比例关系自动去计算了。</p><h4 id="transitions-transforms-和-animation" tabindex="-1"><a class="header-anchor" href="#transitions-transforms-和-animation" aria-hidden="true">#</a> Transitions, Transforms 和 Animation</h4><p><strong>Transitions</strong></p><ul><li>transition-property：用于指定过渡的性质，比如 transition-property:backgrond 就是指 backgound 参与这个过渡</li><li>transition-duration：用于指定这个过渡的持续时间</li><li>transition-delay：用于制定延迟过渡的时间</li><li>transition-timing-function：用于指定过渡类型，有 ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Transforms</strong></p><p>指拉伸，压缩，旋转，偏移等等一些图形学里面的基本变换。</p><p><strong>Animation</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@-webkit-keyframes anim1 {\n    0% {\n        Opacity: 0;\n Font-size: 12px;\n    }\n    100% {\n        Opacity: 1;\n Font-size: 24px;\n    }\n }\n .anim1Div {\n    -webkit-animation-name: anim1 ;\n    -webkit-animation-duration: 1.5s;\n    -webkit-animation-iteration-count: 4;\n    -webkit-animation-direction: alternate;\n    -webkit-animation-timing-function: ease-in-out;\n }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>平台页面类似淘宝，采用 ElementUI 中的响应式布局兼容页面端体验，懒加载路由优化页面加载速度，异步调用 API，减少性能影响。</p><h3 id="隐藏样式的方法" tabindex="-1"><a class="header-anchor" href="#隐藏样式的方法" aria-hidden="true">#</a> 隐藏样式的方法</h3><ul><li>display:none</li><li>visibility:hidden</li><li>opacity:0</li><li>设置 height、width 模型属性为 0</li><li>position:absolute</li><li>clip-path</li></ul>',40),m={},k=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",t,[l,(0,e.Wm)(a)])]),r,(0,e._)("p",null,[(0,e._)("a",c,[o,(0,e.Wm)(a)])]),i,(0,e._)("p",null,[(0,e._)("a",u,[b,(0,e.Wm)(a)])]),d],64)}]])}}]);