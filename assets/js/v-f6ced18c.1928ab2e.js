"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[9254],{1543:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-f6ced18c",path:"/blogs/Algorithm/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80.html",title:"算法基础",lang:"en-US",frontmatter:{title:"算法基础",date:"2021/03/20",tags:["算法","Algorithm"],categories:["Algorithm"]},excerpt:"",headers:[{level:2,title:"枚举",slug:"枚举",children:[{level:3,title:"要点",slug:"要点",children:[]},{level:3,title:"给出解空间",slug:"给出解空间",children:[]},{level:3,title:"减少枚举的空间",slug:"减少枚举的空间",children:[]},{level:3,title:"选择合适的枚举顺序",slug:"选择合适的枚举顺序",children:[]},{level:3,title:"例题",slug:"例题",children:[]}]},{level:2,title:"递归&分治",slug:"递归-分治",children:[{level:3,title:"递归",slug:"递归",children:[]}]}],git:{},filePathRelative:"blogs/Algorithm/算法基础.md"}},1178:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var t=a(6252);const p=(0,t.uE)('<h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>枚举（英语：Enumerate）是基于已有知识来猜测答案的一种问题求解策略。</p><p>枚举的思想是不断地猜测，从可能的集合中一一尝试，然后再判断题目的条件是否成立。</p><h3 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h3><h3 id="给出解空间" tabindex="-1"><a class="header-anchor" href="#给出解空间" aria-hidden="true">#</a> <strong>给出解空间</strong></h3><p><strong>建立简洁的数学模型</strong></p><p><strong>枚举的适合要想清楚：可能的情况是什么？枚举哪些要素？</strong></p><h3 id="减少枚举的空间" tabindex="-1"><a class="header-anchor" href="#减少枚举的空间" aria-hidden="true">#</a> 减少枚举的空间</h3><p><strong>枚举的范围是什么？是所有的内容都需要枚举吗？</strong></p><p><strong>再用枚举法解决问题的适合，一定要想清楚这两件事，否者会带来不必要的开销。</strong></p><h3 id="选择合适的枚举顺序" tabindex="-1"><a class="header-anchor" href="#选择合适的枚举顺序" aria-hidden="true">#</a> 选择合适的枚举顺序</h3><p><strong>根据题目判断。比如例题中要求的是最大的符合条件的素数，那自然是从小到大枚举比较合适。</strong></p><h3 id="例题" tabindex="-1"><a class="header-anchor" href="#例题" aria-hidden="true">#</a> 例题</h3><p>一个数组中的数互不相同，求其中和为 0的数对的个数</p><hr><p>枚举两个数的代码很容易就可以写出来。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>来看看枚举的范围如何优化。原问题的答案由两部分构成：两个数相等的情况和不相等的情况。相等的情况只需要枚举每一个数判断一下是否合法。至于不相等的情况，由于题中没要求数对是有序的，答案就是有序的情况的两倍（考虑如果 <code>(a, b)</code> 是答案，那么 <code>(b, a)</code> 也是答案）。对于这种情况，只需统计人为要求有顺序之后的答案，最后再乘上 2就好了。</p><p>不妨要求第一个数要出现在靠前的位置。代码如下：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不难发现这里已经减少了 的枚举范围，减少了这段代码的时间开销。</p><p>然而这并不是最优的结果。</p><p>两个数是否都一定要枚举出来呢？枚举其中一个数之后，题目的条件已经确定了其他的要素（另一个数），如果能找到一种方法直接判断题目要求的那个数是否存在，就可以省掉枚举后一个数的时间了。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 要求 a 数组中的数的绝对值都小于 MAXN</span>\nbool met<span class="token punctuation">[</span>MAXN <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 初始化 met 数组为 0；</span>\n<span class="token function">memset</span><span class="token punctuation">(</span>met<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>met<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>met<span class="token punctuation">[</span>MAXN <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>\n  <span class="token comment">// 为了避免负数下标</span>\n  met<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>PS:我也没想明白咋优化的，提示：当a是桶数组</strong></p><hr><h2 id="递归-分治" tabindex="-1"><a class="header-anchor" href="#递归-分治" aria-hidden="true">#</a> 递归&amp;分治</h2><p><strong>递归（英语：Recursion），在数学和计算机科学中是指在函数的定义中使用函数自身的方法，在计算机科学中还额外指一种通过重复将问题分解为同类的子问题而解决问题的方法。</strong></p><p><strong>分治（英语：Divide and Conquer），字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</strong></p><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><blockquote><p>要理解递归，就得先理解什么是递归。</p></blockquote><p>递归的基本思想是某个函数直接或者间接地调用自身，这样原问题的求解就转换为了许多性质相同但是规模更小的子问题。求解时只需要关注如何把原问题划分成符合条件的子问题，而不需要过分关注这个子问题是如何被解决的。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span>传入数值<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token keyword">return</span> 最小子问题解<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>缩小规模<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//不使用递归的归并排序算法</span>\ntemplate <span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> seg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> seg <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> seg <span class="token operator">=</span> seg <span class="token operator">+</span> seg<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> n <span class="token operator">-</span> seg<span class="token punctuation">;</span> start <span class="token operator">+=</span> seg <span class="token operator">+</span> seg<span class="token punctuation">)</span>\n      <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> seg <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>start <span class="token operator">+</span> seg <span class="token operator">+</span> seg <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//使用递归的归并排序算法</span>\ntemplate <span class="token operator">&lt;</span>typename T<span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">int</span> mid <span class="token operator">=</span> front <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> front<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> front<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> front<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><p>在程序执行中，递归是利用堆栈来实现的。每当进入一个函数调用，栈就会增加一层栈帧，每次函数返回，栈就会减少一层栈帧。而栈不是无限大的，当递归层数过多时，就会造成 <strong>栈溢出</strong> 的后果。</p><p>显然有时候递归处理是高效的，比如归并排序；<strong>有时候是低效的</strong>，比如数孙悟空身上的毛，因为堆栈会消耗额外空间，而简单的递推不会消耗空间。比如这个例子，给一个链表头，计算它的长度：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 典型的递推遍历框架</span>\n<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> nullptr<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> size<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> size<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 我就是要写递归，递归天下第一</span>\n<span class="token keyword">int</span> <span class="token function">size_recurison</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">size_recurison</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="递归优化" tabindex="-1"><a class="header-anchor" href="#递归优化" aria-hidden="true">#</a> 递归优化</h4>',39),e=(0,t.Uk)("主页面："),o={href:"https://oi-wiki.org/search/opt/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("搜索优化"),l=(0,t.Uk)(" 和 "),r={href:"https://oi-wiki.org/dp/memo/",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("记忆化搜索"),k=(0,t.uE)('<p>比较初级的递归实现可能递归次数太多，容易超时。这时需要对递归进行优化。</p><h4 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法" aria-hidden="true">#</a> 分治算法</h4><p>大概的流程可以分为三步：分解 -&gt; 解决 -&gt; 合并。</p><ol><li>分解原问题为结构相同的子问题。</li><li>分解到某个容易求解的边界之后，进行递归求解。</li><li>将子问题的解合并成原问题的解。</li></ol><p>分治法能解决的问题一般有如下特征：</p><ul><li>该问题的规模缩小到一定的程度就可以容易地解决。</li><li>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质，利用该问题分解出的子问题的解可以合并为该问题的解。</li><li>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。</li></ul>',6),i=(0,t.Uk)("如果各子问题是不独立的，则分治法要重复地解公共的子问题，也就做了许多不必要的工作。此时虽然也可用分治法，但一般用 "),_={href:"https://oi-wiki.org/dp/basic/",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("动态规划"),b=(0,t.Uk)(" 较好。"),m=(0,t.uE)('<p>以归并排序为例。假设实现归并排序的函数名为 <code>merge_sort</code>。明确该函数的职责，即 <strong>对传入的一个数组排序</strong>。这个问题显然可以分解。给一个数组排序等于给该数组的左右两半分别排序，然后合并成一个数组。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>一个数组<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>可以很容易处理<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token function">merge_sort</span><span class="token punctuation">(</span>左半个数组<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">merge_sort</span><span class="token punctuation">(</span>右半个数组<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">merge</span><span class="token punctuation">(</span>左半个数组<span class="token punctuation">,</span> 右半个数组<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>传给它半个数组，那么处理完后这半个数组就已经被排好了。注意到，<code>merge_sort</code> 与二叉树的后序遍历模板极其相似。因为分治算法的套路是 <strong>分解 -&gt; 解决（触底）-&gt; 合并（回溯）</strong>，先左右分解，再处理合并，回溯就是在退栈，即相当于后序遍历。</p><h4 id="要点-1" tabindex="-1"><a class="header-anchor" href="#要点-1" aria-hidden="true">#</a> 要点</h4><h5 id="写递归的要点" tabindex="-1"><a class="header-anchor" href="#写递归的要点" aria-hidden="true">#</a> 写递归的要点</h5><p><strong>明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，</strong> 否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。</p><p>以遍历二叉树为例</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这几行代码就足以遍历任何一棵二叉树了。对于递归函数 <code>traverse(root)</code>，只要相信给它一个根节点 <code>root</code>，它就能遍历这棵树。所以只需要把这个节点的左右节点再传给这个函数就行了。</p><p>同样扩展到遍历一棵 N 叉树。与二叉树的写法一模一样。不过，对于 N 叉树，显然没有中序遍历。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>child <span class="token operator">:</span> root<span class="token operator">-&gt;</span>children<span class="token punctuation">)</span> <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h4><h5 id="递归与枚举的区别" tabindex="-1"><a class="header-anchor" href="#递归与枚举的区别" aria-hidden="true">#</a> 递归与枚举的区别</h5><p>递归和枚举的区别在于：枚举是横向地把问题划分，然后依次求解子问题；而递归是把问题逐级分解，是纵向的拆分。</p><h5 id="递归与分治的区别" tabindex="-1"><a class="header-anchor" href="#递归与分治的区别" aria-hidden="true">#</a> 递归与分治的区别</h5><p>递归是一种编程技巧，一种解决问题的思维方式；分治算法很大程度上是基于递归的，解决更具体问题的算法思想。</p><h4 id="例题-1" tabindex="-1"><a class="header-anchor" href="#例题-1" aria-hidden="true">#</a> 例题</h4>',17),h=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,t._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,t._)("circle",{cx:"12",cy:"12",r:"9"}),(0,t._)("path",{d:"M12 8h.01"}),(0,t._)("path",{d:"M11 12h1v4h1"})])]),(0,t._)("p",{class:"custom-container-title"},"TIP"),(0,t._)("p",null,"给定一个二叉树，它的每个结点都存放着一个整数值。"),(0,t._)("p",null,"找出路径和等于给定数值的路径总数。"),(0,t._)("p",null,"路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。"),(0,t._)("p",null,"二叉树不超过 1000 个节点，且节点数值范围是[-1000000,1000000]的整数。"),(0,t._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,t._)("pre",{class:"language-text"},[(0,t._)("code",null,"root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n\n返回 3。和等于 8 的路径有：\n\n1.  5 -> 3\n2.  5 -> 2 -> 1\n3. -3 -> 11\n")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br")])]),(0,t._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,t._)("pre",{class:"language-text"},[(0,t._)("code",null,"/**\n * 二叉树结点的定义\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])])],-1),g=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,t._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,t._)("circle",{cx:"12",cy:"12",r:"9"}),(0,t._)("path",{d:"M12 8h.01"}),(0,t._)("path",{d:"M11 12h1v4h1"})])]),(0,t._)("p",{class:"custom-container-title"},"TIP"),(0,t._)("p",null,"参考代码"),(0,t._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,t._)("pre",{class:"language-c"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("TreeNode "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("root"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" nullptr"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("left"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)("\n         "),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("right"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("TreeNode "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("node"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" nullptr"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("left"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)("\n         "),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("right"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br")])])],-1),U=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,t._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,t._)("circle",{cx:"12",cy:"12",r:"9"}),(0,t._)("path",{d:"M12 8h.01"}),(0,t._)("path",{d:"M11 12h1v4h1"})])]),(0,t._)("p",{class:"custom-container-title"},"TIP"),(0,t._)("p",null,"题目看起来很复杂，不过代码却极其简洁。"),(0,t._)("p",null,"首先明确，递归求解树的问题必然是要遍历整棵树的，所以二叉树的遍历框架（分别对左右子树递归调用函数本身）必然要出现在主函数 pathSum 中。那么对于每个节点，它们应该干什么呢？它们应该看看，自己和它们的子树包含多少条符合条件的路径。好了，这道题就结束了。"),(0,t._)("p",null,"按照前面说的技巧，根据刚才的分析来定义清楚每个递归函数应该做的事："),(0,t._)("p",null,[(0,t._)("code",null,"PathSum"),(0,t.Uk)(" 函数：给定一个节点和一个目标值，返回以这个节点为根的树中，和为目标值的路径总数。")]),(0,t._)("p",null,[(0,t._)("code",null,"count"),(0,t.Uk)(" 函数：给定一个节点和一个目标值，返回以这个节点为根的树中，能凑出几个以该节点为路径开头，和为目标值的路径总数。")]),(0,t._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,t._)("pre",{class:"language-c"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("TreeNode "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("root"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" nullptr"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" pathImLeading "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 自己为开头的路径数"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" leftPathSum "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("left"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 左边路径总数（相信它能算出来）"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" rightPathSum "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)("\n      "),(0,t._)("span",{class:"token function"},"pathSum"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("root"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("right"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 右边路径总数（相信它能算出来）"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" leftPathSum "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" rightPathSum "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" pathImLeading"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("TreeNode "),(0,t._)("span",{class:"token operator"},"*"),(0,t.Uk)("node"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" nullptr"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 能不能作为一条单独的路径呢？"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" isMe "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(" sum"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"0"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 左边的，你那边能凑几个 sum - node.val ？"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" leftNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("left"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token comment"},"// 右边的，你那边能凑几个 sum - node.val ？"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"int"),(0,t.Uk)(" rightNode "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token function"},"count"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("right"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(" sum "),(0,t._)("span",{class:"token operator"},"-"),(0,t.Uk)(" node"),(0,t._)("span",{class:"token operator"},"->"),(0,t.Uk)("val"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n  "),(0,t._)("span",{class:"token keyword"},"return"),(0,t.Uk)(" isMe "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" leftNode "),(0,t._)("span",{class:"token operator"},"+"),(0,t.Uk)(" rightNode"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// 我这能凑这么多个"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br")])]),(0,t._)("p",null,[(0,t.Uk)("还是那句话，"),(0,t._)("strong",null,"明白每个函数能做的事，并相信它们能够完成。")]),(0,t._)("p",null,[(0,t.Uk)("总结下，"),(0,t._)("code",null,"PathSum"),(0,t.Uk)(" 函数提供了二叉树遍历框架，在遍历中对每个节点调用 "),(0,t._)("code",null,"count"),(0,t.Uk)(" 函数（这里用的是先序遍历，不过中序遍历和后序遍历也可以）。"),(0,t._)("code",null,"count"),(0,t.Uk)(" 函数也是一个二叉树遍历，用于寻找以该节点开头的目标值路径。")])],-1),f={},w=(0,a(3744).Z)(f,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)]),l,(0,t._)("a",r,[u,(0,t.Wm)(a)])]),k,(0,t._)("blockquote",null,[(0,t._)("p",null,[i,(0,t._)("a",_,[d,(0,t.Wm)(a)]),b])]),m,h,g,U],64)}]])}}]);