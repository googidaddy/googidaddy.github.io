"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[9015],{1e3:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-31091dc5",path:"/blogs/C++/String.html",title:"String",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"String is mutable in C++",slug:"string-is-mutable-in-c",children:[]},{level:2,title:"An Interesting example from leetcode",slug:"an-interesting-example-from-leetcode",children:[]},{level:2,title:"Reverse Words in a String",slug:"reverse-words-in-a-string",children:[]},{level:2,title:"Reverse Words in a String III",slug:"reverse-words-in-a-string-iii",children:[]}],git:{},filePathRelative:"blogs/C++/String.md"}},1611:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h1><ul><li>Be familiar with the <code>basic operations</code> in a string, especially the unique operations which we don&#39;t have in an array</li><li>Understand the differences between different <code>comparison</code> functions;</li><li>Determine whether the string is <code>immutable</code> or not in your favorite language and understand the impact of this feature;</li><li>Be able to solve basic string-related problems.</li></ul><p><strong>For instance, if the length of the string is <code>N</code>, the time complexity of both finding operation and substring operation is <code>O(N)</code>.</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    string s1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 is \\&quot;Hello World\\&quot;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    string s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s2 is initialized by s1&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    string <span class="token function">s3</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s3 is initialized by s1&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token comment">// compare by &#39;==&#39;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Compared by &#39;==&#39;:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and \\&quot;Hello World\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and s2: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and s3: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token comment">// compare by &#39;compare&#39;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Compared by &#39;compare&#39;:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and \\&quot;Hello World\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and s2: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s1 and s3: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="string-is-mutable-in-c" tabindex="-1"><a class="header-anchor" href="#string-is-mutable-in-c" aria-hidden="true">#</a> String is mutable in C++</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    string s1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    s1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    string s1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// 1. concatenate</span>\n    s1 <span class="token operator">+=</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token comment">// 2. find</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The position of first &#39;o&#39; is: &quot;</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The position of last &#39;o&#39; is: &quot;</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token comment">// 3. get substr (include 6)</span>\n    cout <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="an-interesting-example-from-leetcode" tabindex="-1"><a class="header-anchor" href="#an-interesting-example-from-leetcode" aria-hidden="true">#</a> An Interesting example from leetcode</h2><p><img src="C:\\Users\\domado\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210319134029167.png" alt="image-20210319134029167"></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//solution</span>\nclass Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        string output <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">auto</span> a <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> output <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> \n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> output<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>sort puts them in alphabetical order.</li><li>only need to compare the first and last one cuz all ones in the middle will be cancelled out.</li></ul><h2 id="reverse-words-in-a-string" tabindex="-1"><a class="header-anchor" href="#reverse-words-in-a-string" aria-hidden="true">#</a> Reverse Words in a String</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;the sky is blue&quot;\nOutput: &quot;blue is sky the&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;  hello world  &quot;\nOutput: &quot;world hello&quot;\nExplanation: Your reversed string should not contain leading or trailing spaces.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;a good   example&quot;\nOutput: &quot;example good a&quot;\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;  Bob    Loves  Alice   &quot;\nOutput: &quot;Alice Loves Bob&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;Alice does not even like bob&quot;\nOutput: &quot;bob like even not does Alice&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Tip : Using a vector</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        string word<span class="token punctuation">;</span>\n        vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">&gt;&gt;</span>word<span class="token punctuation">)</span>\n            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        string ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            ans<span class="token operator">+=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        ans<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="reverse-words-in-a-string-iii" tabindex="-1"><a class="header-anchor" href="#reverse-words-in-a-string-iii" aria-hidden="true">#</a> Reverse Words in a String III</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;Let&#39;s take LeetCode contest&quot;\nOutput: &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;God Ding&quot;\nOutput: &quot;doG gniD&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>code</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Solution <span class="token punctuation">{</span>\npublic<span class="token operator">:</span>\n    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        string word<span class="token punctuation">;</span>\n        string ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">&gt;&gt;</span>word<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n           <span class="token function">reverse</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ans <span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>word<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',24),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])}}]);