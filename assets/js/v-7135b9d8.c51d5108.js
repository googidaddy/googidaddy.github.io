"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[2439],{2801:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7135b9d8",path:"/blogs/JavaScript/asyncawait.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"async/await",slug:"async-await",children:[]}],git:{},filePathRelative:"blogs/JavaScript/asyncawait.md"}},9915:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2><p>async/await 语法是在 ES7 引入 JS 的，其目的是使用异步调用函数来返回一个 promise，但使代码看起来像是同步调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* \n\tpromise.then(()=&gt;{console.log(&#39;hi&#39;)}) 避免回调地狱\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>在具体点，整体像是调控暂停某一处代码，直到响应为止</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* \n\t在mongoose中，有model.find({})方法 \n\t找到所有的字段\n\t下面看看伪代码\n*/</span>\n<span class="token keyword">const</span> notes <span class="token operator">=</span> <span class="token keyword">await</span> Note<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// await处暂停等待直到相关promise满足,才会执行下一行。</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;operation returned the following notes&#39;</span><span class="token punctuation">,</span> notes<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>差不多有点理解？相当于就是一个关键字控制了流程</strong></p><p><strong>但是这个语法不能滥用，await的返回必须是一个promise，同时要在async函数中使用</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> notes <span class="token operator">=</span> <span class="token keyword">await</span> Note<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;operation returned the following notes&#39;</span><span class="token punctuation">,</span> notes<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> notes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;the first note is removed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',8),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);