"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[8589],{6487:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-dec51b76",path:"/blogs/C++/C++-notes.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"C++-notes",slug:"c-notes",children:[]},{level:2,title:"C++概念",slug:"c-概念",children:[{level:3,title:"在C++中强烈建议不要使用原始指针",slug:"在c-中强烈建议不要使用原始指针",children:[]},{level:3,title:"范围",slug:"范围",children:[]},{level:3,title:"Lambda",slug:"lambda",children:[]},{level:3,title:"智能指针",slug:"智能指针",children:[]}]}],git:{},filePathRelative:"blogs/C++/C++-notes.md"}},6018:(n,s,a)=>{a.r(s),a.d(s,{default:()=>z});var p=a(6252);const e=(0,p._)("h2",{id:"c-notes",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#c-notes","aria-hidden":"true"},"#"),(0,p.Uk)(" C++-notes")],-1),t=(0,p._)("p",null,[(0,p._)("strong",null,[(0,p.Uk)("写leetcode的时候，有时候经常需要查阅相关用法，C++还未印入灵魂，so，去微软学习了一趟,"),(0,p._)("u",null,"有一定机翻的僵硬")])],-1),o={href:"https://docs.microsoft.com/zh-cn/cpp/cpp/cpp-type-system-modern-cpp?view=msvc-160",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("source"),l=(0,p.uE)('<h2 id="c-概念" tabindex="-1"><a class="header-anchor" href="#c-概念" aria-hidden="true">#</a> C++概念</h2><p>C + + 是一种 <em>强类型</em> 语言，它也是 <em>静态类型化</em> 的。每个对象都有一个类型，该类型永远不会改变 (不会与静态数据对象) 混淆。 在代码中声明变量时，必须显式指定其类型，或者使用 <strong><code>auto</code></strong> 关键字指示编译器从初始值设定项推断类型。 在代码中声明函数时，必须指定每个参数的类型及其返回值; <strong><code>void</code></strong> 如果函数未返回任何值，则必须指定其返回值。 例外情况是，当使用允许任意类型参数的函数模板时。</p><h3 id="在c-中强烈建议不要使用原始指针" tabindex="-1"><a class="header-anchor" href="#在c-中强烈建议不要使用原始指针" aria-hidden="true">#</a> 在C++中强烈建议不要使用原始指针</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    unique_ptr<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> <span class="token function">pMc</span><span class="token punctuation">(</span>new MyClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pMc<span class="token operator">-&gt;</span><span class="token function">DoSomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n  <span class="token comment">// No memory leak. Out-of-scope automatically calls the destructor</span>\n  <span class="token comment">// for the unique_ptr, freeing the resource.c</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="范围" tabindex="-1"><a class="header-anchor" href="#范围" aria-hidden="true">#</a> 范围</h3><p><strong>全局范围、命名空间范围、本地范围、类范围、语句范围、函数范围</strong></p><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h3>',7),r={href:"https://docs.microsoft.com/zh-cn/cpp/cpp/lambda-expressions-in-cpp?view=msvc-160",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("source"),i=(0,p.uE)('<p>首先来一个ez demo</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>\n\n<span class="token keyword">void</span> <span class="token function">abssort</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> n<span class="token punctuation">,</span>\n        <span class="token comment">// Lambda expression begins</span>\n        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token comment">// end of lambda expression</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>Lambda组成部分：</strong></p><p><img src="https://docs.microsoft.com/zh-cn/cpp/cpp/media/lambdaexpsyntax.png?view=msvc-160" alt=""></p><ol><li><strong><em>捕获子句</em> (也称为 c + + 规范中的 <em>引导</em> 。 )</strong></li><li><strong><em>参数列表</em> 可有可无. (也称为 <em>lambda 声明符</em>)</strong></li><li><strong><em>可变规范</em> 可有可无.</strong></li><li><strong><em>异常规范</em> 可有可无.</strong></li><li><strong><em>尾随-返回类型</em> 可有可无.</strong></li><li><strong><em>lambda 体</em>。</strong></li></ol><p><strong>demo 1</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// even_lambda.cpp</span>\n<span class="token comment">// compile with: cl /EHsc /nologo /W4 /MTd</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>\nusing namespace std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n   <span class="token comment">// Create a vector object that contains 9 elements.</span>\n   vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>\n   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token comment">// Count the number of even numbers in the vector by</span>\n   <span class="token comment">// for_each(把v的值传给n，遍历一边，偶数增加evenCount)</span>\n   <span class="token keyword">int</span> evenCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n   <span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>evenCount<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cout <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is even &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n         <span class="token operator">++</span>evenCount<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n         cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is odd &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// Print the count of even numbers to the console.</span>\n   cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;There are &quot;</span> <span class="token operator">&lt;&lt;</span> evenCount\n        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; even numbers in the vector.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>demo 2</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// declaring_lambda_expressions1.cpp</span>\n<span class="token comment">// compile with: /EHsc /W4</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\n    using namespace std<span class="token punctuation">;</span>\n\n    <span class="token comment">// Assign the lambda expression that adds two numbers to an auto variable.</span>\n    <span class="token keyword">auto</span> f1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    cout <span class="token operator">&lt;&lt;</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 5</span>\n\n    <span class="token comment">// Assign the same lambda expression to a function object.</span>\n    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    cout <span class="token operator">&lt;&lt;</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 7</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>demo 3</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// declaring_lambda_expressions2.cpp</span>\n<span class="token comment">// compile with: /EHsc /W4</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n   using namespace std<span class="token punctuation">;</span>\n\n   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n   <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// The following lambda expression captures i by value and</span>\n   <span class="token comment">// j by reference.</span>\n   function<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// Change the values of i and j.</span>\n   i <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>\n   j <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// Call f and print its result.</span>\n   cout <span class="token operator">&lt;&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 47</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针" aria-hidden="true">#</a> 智能指针</h3>',12),k={href:"https://docs.microsoft.com/zh-cn/cpp/standard-library/unique-ptr-class?view=msvc-160",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("Unique_ptr"),b=(0,p.Uk)("不共享其指针。 不能将其复制到另一个，而是 "),d=(0,p._)("code",null,"unique_ptr",-1),g=(0,p.Uk)(" 通过值传递给函数，也不能在需要进行复制的任何 c + + 标准库算法中使用。 只能移动 "),h=(0,p._)("code",null,"unique_ptr",-1),v=(0,p.Uk)("。 这意味着，内存资源所有权将转移到另一 "),f=(0,p._)("code",null,"unique_ptr",-1),y=(0,p.Uk)("，并且原始 "),w=(0,p._)("code",null,"unique_ptr",-1),_=(0,p.Uk)(" 不再拥有此资源。 我们建议你将对象限制为由一个所有者所有，因为多个所有权会使程序逻辑变得复杂。 因此，当你需要一个智能指针用于纯 c + + 对象时，请使用 "),q=(0,p._)("code",null,"unique_ptr",-1),x=(0,p.Uk)(" ，当构造时， "),C=(0,p._)("code",null,"unique_ptr",-1),U=(0,p.Uk)(" 请使用 "),j={href:"https://docs.microsoft.com/zh-cn/cpp/standard-library/memory-functions?view=msvc-160#make_unique",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("make_unique"),M=(0,p.Uk)(" helper 函数。"),S=(0,p.uE)('<p><img src="https://docs.microsoft.com/zh-cn/cpp/cpp/media/unique_ptr.png?view=msvc-160" alt=""></p><p><strong>demo</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>unique_ptr<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span> <span class="token function">SongFactory</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>wstring<span class="token operator">&amp;</span> artist<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>wstring<span class="token operator">&amp;</span> title<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Implicit move operation into the variable that stores the result.</span>\n    <span class="token keyword">return</span> make_unique<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span><span class="token punctuation">(</span>artist<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">MakeSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Create a new unique_ptr with a new object.</span>\n    <span class="token keyword">auto</span> song <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span><span class="token punctuation">(</span>L<span class="token string">&quot;Mr. Children&quot;</span><span class="token punctuation">,</span> L<span class="token string">&quot;Namonaki Uta&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Use the unique_ptr.</span>\n    vector<span class="token operator">&lt;</span>wstring<span class="token operator">&gt;</span> titles <span class="token operator">=</span> <span class="token punctuation">{</span> song<span class="token operator">-&gt;</span>title <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Move raw pointer from one unique_ptr to another.</span>\n    unique_ptr<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span> song2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Obtain unique_ptr from function that returns by value.</span>\n    <span class="token keyword">auto</span> song3 <span class="token operator">=</span> <span class="token function">SongFactory</span><span class="token punctuation">(</span>L<span class="token string">&quot;Michael Jackson&quot;</span><span class="token punctuation">,</span> L<span class="token string">&quot;Beat It&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',3),W={},z=(0,a(3744).Z)(W,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,(0,p._)("p",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l,(0,p._)("p",null,[(0,p._)("a",r,[u,(0,p.Wm)(a)])]),i,(0,p._)("p",null,[(0,p._)("a",k,[m,(0,p.Wm)(a)]),b,d,g,h,v,f,y,w,_,q,x,C,U,(0,p._)("a",j,[L,(0,p.Wm)(a)]),M]),S],64)}]])}}]);