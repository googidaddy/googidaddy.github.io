"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[1422],{8102:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-295b3d28",path:"/blogs/NodeJS/Buffer-1.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Buffer-1",slug:"buffer-1",children:[{level:3,title:"格式转换",slug:"格式转换",children:[]},{level:3,title:"读文件",slug:"读文件",children:[]}]}],git:{},filePathRelative:"blogs/NodeJS/Buffer-1.md"}},6735:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h2 id="buffer-1" tabindex="-1"><a class="header-anchor" href="#buffer-1" aria-hidden="true">#</a> Buffer-1</h2><p><strong>JS 原生支持 Unicode，如果要处理二进制，我们应该第一时间想到<code>node.js</code>，内置的 Buffer 类超强（全局存在）</strong></p><h3 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换" aria-hidden="true">#</a> 格式转换</h3><p><strong>一般来说，先不讲各种稀稀拉拉的方法，主要是格式转换</strong></p><ul><li><strong>ascii （需要注意的是，在此编码中，node 会把 null 转换成空格）</strong></li><li><strong>utf8</strong></li><li><strong>utf16le、ucs2</strong></li><li><strong>base64</strong></li><li><strong>hex</strong></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> bfASCII <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bfASCII<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 61 62 63 64&gt;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bfASCII<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// abcd</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="读文件" tabindex="-1"><a class="header-anchor" href="#读文件" aria-hidden="true">#</a> 读文件</h3><p><strong>假设一个<code>.json</code>文件需要去读，用异步方式</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>\n<span class="token comment">// 异步方式</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;xx.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err\n    <span class="token comment">// ts缘故，需要转换一下</span>\n    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>json<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>**同步方式为<code> fs.readFileSync</code>在没有完成读取全部数据前，会阻塞任务。 **</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>fs.readFileSync(path, options);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',11),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])}}]);