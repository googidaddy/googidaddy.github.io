(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{507:function(s,n,e){"use strict";e.r(n);var a=e(4),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[s._v("#")]),s._v(" Queue")]),s._v(" "),e("ul",[e("li",[s._v("First-in-First-out(FIFO)")]),s._v(" "),e("li",[s._v("Last-in-First-out(LIFO)")])]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("Understand the principle of the processing orders of FIFO and LIFO;")])]),s._v(" "),e("li",[e("strong",[s._v("Implement these two data structures;")])]),s._v(" "),e("li",[e("strong",[s._v("Be familiar with the built-in queue and stack structure;")])]),s._v(" "),e("li",[e("strong",[s._v("Solve basic queue-related problems, especially "),e("code",[s._v("BFS")]),s._v(";")])]),s._v(" "),e("li",[e("strong",[s._v("Solve basic stack-related problems;")])]),s._v(" "),e("li",[e("strong",[s._v("Understand how system stack helps you when you solve problems using "),e("code",[s._v("DFS")]),s._v(" and other "),e("code",[s._v("recursion")]),s._v(" algorithms;")])])]),s._v(" "),e("h3",{attrs:{id:"fifo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifo"}},[s._v("#")]),s._v(" FIFO")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/03/screen-shot-2018-05-03-at-151021.png",alt:"queue"}})]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#include <iostream>\n\nclass MyQueue {\n    private:\n        // store elements\n        vector<int> data;       \n        // a pointer to indicate the start position\n        int p_start;            \n    public:\n        MyQueue() {p_start = 0;}\n        /** Insert an element into the queue. Return true if the operation is successful. */\n        bool enQueue(int x) {\n            data.push_back(x);\n            return true;\n        }\n        /** Delete an element from the queue. Return true if the operation is successful. */\n        bool deQueue() {\n            if (isEmpty()) {\n                return false;\n            }\n            p_start++;\n            return true;\n        };\n        /** Get the front item from the queue. */\n        int Front() {\n            return data[p_start];\n        };\n        /** Checks whether the queue is empty or not. */\n        bool isEmpty()  {\n            return p_start >= data.size();\n        }\n};\n\nint main() {\n    MyQueue q;\n    q.enQueue(5);\n    q.enQueue(3);\n    if (!q.isEmpty()) {\n        cout << q.Front() << endl;\n    }\n    q.deQueue();\n    if (!q.isEmpty()) {\n        cout << q.Front() << endl;\n    }\n    q.deQueue();\n    if (!q.isEmpty()) {\n        cout << q.Front() << endl;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br")])]),e("h2",{attrs:{id:"design-circular-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#design-circular-queue"}},[s._v("#")]),s._v(" Design Circular Queue")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input\n["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\n\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("Solution->Using deque")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class MyCircularQueue {\npublic:\n    deque<int> dq;\n    int k ;\n    MyCircularQueue(int k) {\n        this->k = k; // size of queue\n    }\n    \n    bool enQueue(int value) {\n        if(dq.size()<k){\n            dq.push_back(value);\n            return true;\n        }\n        return false;\n    }\n    \n    bool deQueue() {\n        if(!dq.empty()){\n            dq.pop_front();\n            return true;\n        }\n        return false;\n    }\n    \n    int Front() {\n        if(dq.empty())\n            return -1;\n        return dq.front();\n    }\n    \n    int Rear() {\n        if(dq.empty())\n            return -1;\n        return dq.back();\n    }\n    \n    bool isEmpty() {\n        if(dq.empty())\n            return true;\n        return false;\n    }\n    \n    bool isFull() {\n        if(dq.size()==k)\n            return true;\n        return false;\n    }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br")])]),e("p",[e("strong",[s._v("Solution->Normal vector")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class MyCircularQueue {\nprivate:\n    vector<int> data;\n    int head;\n    int tail;\n    int size;\npublic:\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k) {\n        data.resize(k);\n        head = -1;\n        tail = -1;\n        size = k;\n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value) {\n        if (isFull()) {\n            return false;\n        }\n        if (isEmpty()) {\n            head = 0;\n        }\n        tail = (tail + 1) % size;\n        data[tail] = value;\n        return true;\n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue() {\n        if (isEmpty()) {\n            return false;\n        }\n        if (head == tail) {\n            head = -1;\n            tail = -1;\n            return true;\n        }\n        head = (head + 1) % size;\n        return true;\n    }\n    \n    /** Get the front item from the queue. */\n    int Front() {\n        if (isEmpty()) {\n            return -1;\n        }\n        return data[head];\n    }\n    \n    /** Get the last item from the queue. */\n    int Rear() {\n        if (isEmpty()) {\n            return -1;\n        }\n        return data[tail];\n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty() {\n        return head == -1;\n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    bool isFull() {\n        return ((tail + 1) % size) == head;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * bool param_1 = obj.enQueue(value);\n * bool param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * bool param_5 = obj.isEmpty();\n * bool param_6 = obj.isFull();\n */\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br")])]),e("h2",{attrs:{id:"queue-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue-usage"}},[s._v("#")]),s._v(" Queue-Usage")]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#include <iostream>\n\nint main() {\n    // 1. Initialize a queue.\n    queue<int> q;\n    // 2. Push new element.\n    q.push(5);\n    q.push(13);\n    q.push(8);\n    q.push(6);\n    // 3. Check if queue is empty.\n    if (q.empty()) {\n        cout << "Queue is empty!" << endl;\n        return 0;\n    }\n    // 4. Pop an element.\n    q.pop();\n    // 5. Get the first element.\n    cout << "The first element is: " << q.front() << endl;\n    // 6. Get the last element.\n    cout << "The last element is: " << q.back() << endl;\n    // 7. Get the size of the queue.\n    cout << "The size is: " << q.size() << endl;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("The first element is: 13\nThe last element is: 6\nThe size is: 3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"moving-average-from-data-stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#moving-average-from-data-stream"}},[s._v("#")]),s._v(" Moving Average from data Stream")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MovingAverage m = new MovingAverage(3);\nm.next(1) = 1\nm.next(10) = (1 + 10) / 2\nm.next(3) = (1 + 10 + 3) / 3\nm.next(5) = (10 + 3 + 5) / 3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("Solution")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class MovingAverage\npublic:\n\tMovingAverage(int size){\n\t\tthis->size = size;\n\t\tsum = 0;\n\t}\n\tdouble next(int num){\n\tif(q.size()>=size){\n\tsum -= q.front();\n\tq.pop();\n\t}\n\tq.push(num);\n\tsum += num;\n\treturn sum/q.size();\n\t}\nprivate:\n\tqueue<int> q;\n\tint size;\n\tdouble sum;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h2",{attrs:{id:"queue-and-bfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue-and-bfs"}},[s._v("#")]),s._v(" Queue and BFS")]),s._v(" "),e("p",[e("code",[s._v("Breadth-first search")]),s._v(" (BFS) is an algorithm to "),e("code",[s._v("traverse or search")]),s._v(" in data structures like a tree or a graph.")]),s._v(" "),e("p",[e("strong",[s._v("One common application of Breadth-first Search (BFS) is to find the shortest path from the root node to the target node. In this article, we provide an example to explain how queue is applied in a BFS algorithm step by step.")])]),s._v(" "),e("blockquote",[e("h3",{attrs:{id:"it-will-be-important-to-determine-the-nodes-and-the-edges-before-doing-bfs-in-a-specific-question-typically-the-node-will-be-an-actual-node-or-a-status-while-the-edge-will-be-an-actual-edge-or-a-possible-transition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#it-will-be-important-to-determine-the-nodes-and-the-edges-before-doing-bfs-in-a-specific-question-typically-the-node-will-be-an-actual-node-or-a-status-while-the-edge-will-be-an-actual-edge-or-a-possible-transition"}},[s._v("#")]),s._v(" "),e("strong",[s._v("It will be important to determine the nodes and the edges before doing BFS in a specific question. Typically, the node will be an actual node or a status while the edge will be an actual edge or a possible transition.")])])]),s._v(" "),e("h3",{attrs:{id:"template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Template")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/open-the-lock/solution/wo-xie-liao-yi-tao-bfs-suan-fa-kuang-jia-jian-dao-/",target:"_blank",rel:"noopener noreferrer"}},[s._v("source"),e("OutboundLink")],1)]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int BFS(Node start, Node target) {\n    Queue<Node> q; \n    Set<Node> visited; \n    \n    q.offer(start); \n    visited.add(start);\n    int step = 0; \n\n    while (q not empty) {\n        int sz = q.size();\n        for (int i = 0; i < sz; i++) {\n            Node cur = q.poll();\n            if (cur is target)\n                return step;\n            for (Node x : cur.adj())\n                if (x not in visited) {\n                    q.offer(x);\n                    visited.add(x);\n                }\n        }\n        step++;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("h2",{attrs:{id:"number-of-islands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number-of-islands"}},[s._v("#")]),s._v(" Number of Islands")]),s._v(" "),e("p",[s._v("Given an "),e("code",[s._v("m x n")]),s._v(" 2D binary grid "),e("code",[s._v("grid")]),s._v(" which represents a map of "),e("code",[s._v("'1'")]),s._v("s (land) and "),e("code",[s._v("'0'")]),s._v("s (water), return "),e("em",[s._v("the number of islands")]),s._v(".")]),s._v(" "),e("p",[s._v("An "),e("strong",[s._v("island")]),s._v(" is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]\nOutput: 1\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]\nOutput: 3\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"solution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Solution")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Solution {\npublic:\n     void dfs(vector<vector<char>>& grid ,int i,int j){\n        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]!='1')return;\n\t\t\n         grid[i][j] = '-';   \n\t\t \n         dfs(grid,i,j-1); \n         dfs(grid,i,j+1);    \n         dfs(grid,i-1,j);    \n         dfs(grid,i+1,j);    \n    }\n    \n    int numIslands(vector<vector<char>>& grid) {\n        int ans=0;\n        \n        for(int i=0;i<grid.size();i++)\n            for(int j=0;j<grid[0].size();j++)\n                if(grid[i][j]=='1'){\n                    ans++;\n                    dfs(grid,i,j);\n                }\n            \n        return ans;\n    }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("h2",{attrs:{id:"open-the-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#open-the-lock"}},[s._v("#")]),s._v(" Open the Lock")]),s._v(" "),e("p",[s._v("You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: "),e("code",[s._v("'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'")]),s._v(". The wheels can rotate freely and wrap around: for example we can turn "),e("code",[s._v("'9'")]),s._v(" to be "),e("code",[s._v("'0'")]),s._v(", or "),e("code",[s._v("'0'")]),s._v(" to be "),e("code",[s._v("'9'")]),s._v(". Each move consists of turning one wheel one slot.")]),s._v(" "),e("p",[s._v("The lock initially starts at "),e("code",[s._v("'0000'")]),s._v(", a string representing the state of the 4 wheels.")]),s._v(" "),e("p",[s._v("You are given a list of "),e("code",[s._v("deadends")]),s._v(" dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.")]),s._v(" "),e("p",[s._v("Given a "),e("code",[s._v("target")]),s._v(" representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202"\nOutput: 6\nExplanation:\nA sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".\nNote that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end "0102".\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: deadends = ["8888"], target = "0009"\nOutput: 1\nExplanation:\nWe can turn the last wheel in reverse to move from "0000" -> "0009".\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"\nOutput: -1\nExplanation:\nWe can\'t reach the target without getting stuck.\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Input: deadends = ["0000"], target = "8888"\nOutput: -1\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"solution-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solution-2"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Solution")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.com/problems/open-the-lock/discuss/880951/C%2B%2B-BFS-Explanation-With-Paint-%3AD-Pictures",target:"_blank",rel:"noopener noreferrer"}},[s._v("thanks"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("img",{attrs:{src:"https://assets.leetcode.com/users/images/34621845-1d47-4ad5-a2d3-87f25500b5e7_1602354020.2690804.png",alt:""}})]),s._v(" "),e("p",[e("img",{attrs:{src:"https://assets.leetcode.com/users/images/7103423f-648c-4ce0-bb17-cd3d71606620_1602354910.327869.png",alt:""}})]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Solution {\npublic:\n    int openLock(vector<string> &deadends, string target) {\n        unordered_set<string> deadendsSet(deadends.begin(), deadends.end());\n        unordered_set<string> visited;\n        int result = 0;\n        if (deadendsSet.find(\"0000\") != deadendsSet.end()) {\n            return -1;\n        }\n        queue<string> wheelQueue;\n        wheelQueue.push(\"0000\");\n        visited.insert(\"0000\");\n        while (!wheelQueue.empty()) {\n            int levelSize = wheelQueue.size();\n            while (levelSize--) {\n                string up, down, currentWheel = wheelQueue.front();\n                wheelQueue.pop();\n                if (currentWheel == target) {\n                    return result;\n                }\n                for (int i = 0; i < 4; i++) {\n                    down = up = currentWheel;\n                    char upCh = up[i], downCh = down[i];\n                    up[i] = (upCh == '9' ? '0' : upCh + 1);\n                    down[i] = (downCh == '0' ? '9' : downCh - 1);\n                    if (visited.find(up) == visited.end() && deadendsSet.find(up) == deadendsSet.end()) {\n                        wheelQueue.push(up);\n                        visited.insert(up);\n                    }\n                    if (visited.find(down) == visited.end() && deadendsSet.find(down) == deadendsSet.end()) {\n                        wheelQueue.push(down);\n                        visited.insert(down);\n                    }\n                }\n            }\n            result++;\n        }\n        return -1;\n    }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br")])]),e("p",[e("strong",[s._v("有一点挺重要的，但是大部分默认没说，在vector中找东西很费时间，转换为哈希表更合适，培养思维。")])]),s._v(" "),e("h3",{attrs:{id:"another-solution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#another-solution"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Another Solution")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Solution{\n  public:\n    int openLock(vector<string>& deadends,string target){\n        const string start = \"0000\";\n        unordered_set<string> dead(deadends.begin(),deadends.end());\n        if(dead.count(start))return -1;\n        queue<string> q;\n        unordered_set<string> visited{start};\n        int steps= 0;\n        q.push(start);\n        while(!q.empty()){\n            ++steps;\n            const int size = q.size();\n            fot(int i =0;i<size;++i){\n                const string curr = q.front();\n                q.pop();\n            }\n            for(int i=0;i<4;++i){\n                for(int j=-1;j<1;j+=2){\n                 string next = curr;\n                    // next[i]- '0' string to index -- and index to string\n                    next[i] = (next[i]- '0' +j +10)%10 +'0';\n                    if(next == target)return steps;\n                    if(dead.count(next)||visited.count(next))countinue;\n                    q.push(next);\n                    visited.insert(next);\n                }\n            }\n        }\n        return -1;\n    }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("h2",{attrs:{id:"perfect-squares"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#perfect-squares"}},[s._v("#")]),s._v(" Perfect Squares")]),s._v(" "),e("p",[s._v("Given an integer "),e("code",[s._v("n")]),s._v(", return "),e("em",[s._v("the least number of perfect square numbers that sum to")]),s._v(" "),e("code",[s._v("n")]),s._v(".")]),s._v(" "),e("p",[s._v("A "),e("strong",[s._v("perfect square")]),s._v(" is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, "),e("code",[s._v("1")]),s._v(", "),e("code",[s._v("4")]),s._v(", "),e("code",[s._v("9")]),s._v(", and "),e("code",[s._v("16")]),s._v(" are perfect squares while "),e("code",[s._v("3")]),s._v(" and "),e("code",[s._v("11")]),s._v(" are not.")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"solution-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solution-3"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Solution")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Solution {\npublic:\n    int numSquares(int n) {\n        vector<int> dp(n+1);\n        dp[0]=0;\n        dp[1]=1;\n\n        for(int i=2;i<=n;i++){\n            int mincount=INT_MAX;\n            for(int j=1;(j*j)<=i;j++){\n                mincount=min(dp[i-j*j],mincount);\n            }\n            dp[i]=mincount+1;\n        }\n        return dp[n];\n    }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);