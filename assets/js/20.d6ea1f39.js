(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{505:function(e,s,a){"use strict";a.r(s);var v=a(4),t=Object(v.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-基础学习-四"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-基础学习-四"}},[e._v("#")]),e._v(" C++基础学习（四）")]),e._v(" "),a("h2",{attrs:{id:"关联式容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联式容器"}},[e._v("#")]),e._v(" 关联式容器")]),e._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set")]),e._v(" "),a("p",[a("code",[e._v("set")]),e._v(" 是关联容器，含有键值类型对象的已排序集，搜索、移除和插入拥有对数复杂度。"),a("code",[e._v("set")]),e._v(" 内部通常采用红黑树实现。平衡二叉树的特性使得 "),a("code",[e._v("set")]),e._v(" 非常适合处理需要同时兼顾查找、插入与删除的情况。")]),e._v(" "),a("p",[e._v("和数学中的集合相似，"),a("code",[e._v("set")]),e._v(" 中不会出现值相同的元素。如果需要有相同元素的集合，需要使用 "),a("code",[e._v("multiset")]),e._v("。"),a("code",[e._v("multiset")]),e._v(" 的使用方法与 "),a("code",[e._v("set")]),e._v(" 的使用方法基本相同。")]),e._v(" "),a("h4",{attrs:{id:"插入与删除操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入与删除操作"}},[e._v("#")]),e._v(" 插入与删除操作")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("insert(x)")]),e._v(" 当容器中没有等价元素的时候，将元素 x 插入到 "),a("code",[e._v("set")]),e._v(" 中。")]),e._v(" "),a("li",[a("code",[e._v("erase(x)")]),e._v(" 删除值为 x 的 "),a("strong",[e._v("所有")]),e._v(" 元素，返回删除元素的个数。")]),e._v(" "),a("li",[a("code",[e._v("erase(pos)")]),e._v(" 删除迭代器为 pos 的元素，要求迭代器必须合法。")]),e._v(" "),a("li",[a("code",[e._v("erase(first,last)")]),e._v(" 删除迭代器在 范围内的所有元素。")]),e._v(" "),a("li",[a("code",[e._v("clear()")]),e._v(" 清空 "),a("code",[e._v("set")]),e._v("。")])]),e._v(" "),a("h4",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[e._v("#")]),e._v(" 迭代器")]),e._v(" "),a("p",[a("code",[e._v("set")]),e._v(" 提供了以下几种迭代器：")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("begin()/cbegin()")]),e._v("\n返回指向首元素的迭代器，其中 "),a("code",[e._v("*begin = front")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("end()/cend()")]),e._v("\n返回指向数组尾端占位符的迭代器，注意是没有元素的。")]),e._v(" "),a("li",[a("code",[e._v("rbegin()/rcbegin()")]),e._v("\n返回指向逆向数组的首元素的逆向迭代器，可以理解为正向容器的末元素。")]),e._v(" "),a("li",[a("code",[e._v("rend()/rcend()")]),e._v("\n返回指向逆向数组末元素后一位置的迭代器，对应容器首的前一个位置，没有元素。")])]),e._v(" "),a("h4",{attrs:{id:"查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[e._v("#")]),e._v(" 查找")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("count(x)")]),e._v(" 返回 "),a("code",[e._v("set")]),e._v(" 内键为 x 的元素数量。")]),e._v(" "),a("li",[a("code",[e._v("find(x)")]),e._v(" 在 "),a("code",[e._v("set")]),e._v(" 内存在键为 x 的元素时会返回该元素的迭代器，否则返回 "),a("code",[e._v("end()")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("lower_bound(x)")]),e._v(" 返回指向首个不小于给定键的元素的迭代器。如果不存在这样的元素，返回 "),a("code",[e._v("end()")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("upper_bound(x)")]),e._v(" 返回指向首个大于给定键的元素的迭代器。如果不存在这样的元素，返回 "),a("code",[e._v("end()")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("empty()")]),e._v(" 返回容器是否为空。")]),e._v(" "),a("li",[a("code",[e._v("size()")]),e._v(" 返回容器内元素个数。")])]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("set")]),e._v(" 自带的 "),a("code",[e._v("lower_bound")]),e._v(" 和 "),a("code",[e._v("upper_bound")]),e._v(" 的时间复杂度为 O(logn)。")]),e._v(" "),a("p",[e._v("但使用 "),a("code",[e._v("algorithm")]),e._v(" 库中的 "),a("code",[e._v("lower_bound")]),e._v(" 和 "),a("code",[e._v("upper_bound")]),e._v(" 函数对 "),a("code",[e._v("set")]),e._v(" 中的元素进行查询，时间复杂度为O(n) 。****")])]),e._v(" "),a("h4",{attrs:{id:"样例-贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样例-贪心算法"}},[e._v("#")]),e._v(" 样例-贪心算法")]),e._v(" "),a("p",[e._v("在贪心算法中经常会需要出现类似 "),a("strong",[e._v("找出并删除最小的大于等于某个值的元素")]),e._v("。这种操作能轻松地通过 "),a("code",[e._v("set")]),e._v(" 来完成。")]),e._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 现存可用的元素\nset<int> available;\n// 需要大于等于的值\nint x;\n\n// 查找最小的大于等于x的元素\nset<int>::iterator it = available.lower_bound(x);\nif (it == available.end()) {\n  // 不存在这样的元素，则进行相应操作……\n} else {\n  // 找到了这样的元素，将其从现存可用元素中移除\n  available.erase(it);\n  // 进行相应操作……\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" map")]),e._v(" "),a("p",[a("code",[e._v("map")]),e._v(" 是有序键值对容器，它的元素的键是唯一的。搜索、移除和插入操作拥有对数复杂度。"),a("code",[e._v("map")]),e._v(" 通常实现为红黑树。")]),e._v(" "),a("p",[e._v("你可能需要存储一些键值对，例如存储学生姓名对应的分数："),a("code",[e._v("Tom 0")]),e._v("，"),a("code",[e._v("Bob 100")]),e._v("，"),a("code",[e._v("Alan 100")]),e._v("。但是由于数组下标只能为非负整数，所以无法用姓名作为下标来存储，这个时候最简单的办法就是使用 STL 中的 "),a("code",[e._v("map")]),e._v(" 了！")]),e._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("map<Key, T> yourMap;\nmap<string, int> mp;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h4",{attrs:{id:"插入与删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入与删除"}},[e._v("#")]),e._v(" 插入与删除")]),e._v(" "),a("ul",[a("li",[e._v("可以直接通过下标访问来进行查询或插入操作。例如 "),a("code",[e._v('mp["Alan"]=100')]),e._v("。")]),e._v(" "),a("li",[e._v("通过向 "),a("code",[e._v("map")]),e._v(" 中插入一个类型为 "),a("code",[e._v("pair<Key, T>")]),e._v(" 的值可以达到插入元素的目的，例如 "),a("code",[e._v('mp.insert(pair<string,int>("Alan",100));')]),e._v("；")]),e._v(" "),a("li",[a("code",[e._v("erase(key)")]),e._v(" 函数会删除键为 "),a("code",[e._v("key")]),e._v(" 的 "),a("strong",[e._v("所有")]),e._v(" 元素。返回值为删除元素的数量。")]),e._v(" "),a("li",[a("code",[e._v("erase(pos)")]),e._v(": 删除迭代器为 pos 的元素，要求迭代器必须合法。")]),e._v(" "),a("li",[a("code",[e._v("erase(first,last)")]),e._v(": 删除迭代器在 范围内的所有元素。")]),e._v(" "),a("li",[a("code",[e._v("clear()")]),e._v(" 函数会清空整个容器。")])]),e._v(" "),a("blockquote",[a("p",[e._v("在利用下标访问 "),a("code",[e._v("map")]),e._v(" 中的某个元素时，如果 "),a("code",[e._v("map")]),e._v(" 中不存在相应键的元素，会自动在 "),a("code",[e._v("map")]),e._v(" 中插入一个新元素，并将其值设置为默认值（对于整数，值为零；对于有默认构造函数的类型，会调用默认构造函数进行初始化）。")]),e._v(" "),a("p",[e._v("当下标访问操作过于频繁时，容器中会出现大量无意义元素，影响 "),a("code",[e._v("map")]),e._v(" 的效率。因此一般情况下推荐使用 "),a("code",[e._v("find()")]),e._v(" 函数来寻找特定键的元素。")])]),e._v(" "),a("h4",{attrs:{id:"查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[e._v("#")]),e._v(" 查询")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("count(x)")]),e._v(": 返回容器内键为 x 的元素数量。复杂度为 （关于容器大小对数复杂度，加上匹配个数）。")]),e._v(" "),a("li",[a("code",[e._v("find(x)")]),e._v(": 若容器内存在键为 x 的元素，会返回该元素的迭代器；否则返回 "),a("code",[e._v("end()")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("lower_bound(x)")]),e._v(": 返回指向首个不小于给定键的元素的迭代器。")]),e._v(" "),a("li",[a("code",[e._v("upper_bound(x)")]),e._v(": 返回指向首个大于给定键的元素的迭代器。若容器内所有元素均小于或等于给定键，返回 "),a("code",[e._v("end()")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("empty()")]),e._v(": 返回容器是否为空。")]),e._v(" "),a("li",[a("code",[e._v("size()")]),e._v(": 返回容器内元素个数。")])]),e._v(" "),a("h4",{attrs:{id:"样例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样例"}},[e._v("#")]),e._v(" 样例")]),e._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 存储状态与对应的答案\nmap<string, int> record;\n\n// 新搜索到的状态与对应答案\nstring status;\nint ans;\n// 查找对应的状态是否出现过\nmap<string, int>::iterator it = record.find(status);\nif (it == record.end()) {\n  // 尚未搜索过该状态，将其加入状态记录中\n  record[status] = ans;\n  // 进行相应操作……\n} else {\n  // 已经搜索过该状态，进行相应操作……\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h4",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[e._v("#")]),e._v(" 遍历")]),e._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("set<int> s;\ntypedef set<int>::iterator si;\nfor (si it = s.begin(); it != s.end(); it++) cout << *it << endl;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("blockquote",[a("p",[e._v("需要注意的是，对 "),a("code",[e._v("map")]),e._v(" 的迭代器解引用后，得到的是类型为 "),a("code",[e._v("pair<Key, T>")]),e._v(" 的键值对。")])]),e._v(" "),a("p",[e._v("c++11")]),e._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("set<int> s;\nfor (auto x : s) cout << x << endl;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);